// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace OpenAI.FineTuning
{
    public readonly partial struct FineTuningOperationStatus : IEquatable<FineTuningOperationStatus>
    {
        private readonly string _value;

        public FineTuningOperationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ValidatingFilesValue = "validating_files";
        private const string QueuedValue = "queued";
        private const string RunningValue = "running";
        private const string SucceededValue = "succeeded";
        private const string FailedValue = "failed";
        private const string CancelledValue = "cancelled";

        public static FineTuningOperationStatus ValidatingFiles { get; } = new FineTuningOperationStatus(ValidatingFilesValue);
        public static FineTuningOperationStatus Queued { get; } = new FineTuningOperationStatus(QueuedValue);
        public static FineTuningOperationStatus Running { get; } = new FineTuningOperationStatus(RunningValue);
        public static FineTuningOperationStatus Succeeded { get; } = new FineTuningOperationStatus(SucceededValue);
        public static FineTuningOperationStatus Failed { get; } = new FineTuningOperationStatus(FailedValue);
        public static FineTuningOperationStatus Cancelled { get; } = new FineTuningOperationStatus(CancelledValue);
        public static bool operator ==(FineTuningOperationStatus left, FineTuningOperationStatus right) => left.Equals(right);
        public static bool operator !=(FineTuningOperationStatus left, FineTuningOperationStatus right) => !left.Equals(right);
        public static implicit operator FineTuningOperationStatus(string value) => new FineTuningOperationStatus(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FineTuningOperationStatus other && Equals(other);
        public bool Equals(FineTuningOperationStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        public override string ToString() => _value;
    }
}
