openapi: 3.0.0
info:
  title: OpenAI API
  description: The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
  version: 0.0.0
tags:
  - name: Audio
  - name: Assistants
  - name: Batch
  - name: Chat
  - name: Completions
  - name: Embeddings
  - name: Files
  - name: Fine-tuning
  - name: Images
  - name: Models
  - name: Moderations
  - name: Vector Stores
paths:
  /assistants:
    post:
      tags:
        - Assistants
      operationId: createAssistant
      summary: Create an assistant with a model and instructions.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/AssistantObject'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssistantRequest'
    get:
      tags:
        - Assistants
      operationId: listAssistants
      summary: Returns a list of assistants.
      parameters:
        - name: limit
          in: query
          required: false
          description: |-
            A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
            default is 20.
          schema:
            type: integer
            format: int32
            default: 20
        - name: order
          in: query
          required: false
          description: |-
            Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
            for descending order.
          schema:
            $ref: '#/components/schemas/ListOrder'
            default: desc
        - name: after
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `after` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include after=obj_foo in order to fetch the next page of the list.
          schema:
            type: string
        - name: before
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `before` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include before=obj_foo in order to fetch the previous page of the list.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ListAssistantsResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
  /assistants/{assistant_id}:
    get:
      tags:
        - Assistants
      operationId: getAssistant
      summary: Retrieves an assistant.
      parameters:
        - name: assistant_id
          in: path
          required: true
          description: The ID of the assistant to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/AssistantObject'
                  - $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Assistants
      operationId: modifyAssistant
      summary: Modifies an assistant.
      parameters:
        - name: assistant_id
          in: path
          required: true
          description: The ID of the assistant to modify.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/AssistantObject'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyAssistantRequest'
    delete:
      tags:
        - Assistants
      operationId: deleteAssistant
      summary: Delete an assistant.
      parameters:
        - name: assistant_id
          in: path
          required: true
          description: The ID of the assistant to delete.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/DeleteAssistantResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
  /audio/speech:
    post:
      tags:
        - Audio
      operationId: createSpeech
      summary: Generates audio from the input text.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          headers:
            Transfer-Encoding:
              required: false
              description: chunked
              schema:
                type: string
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSpeechRequest'
  /audio/transcriptions:
    post:
      tags:
        - Audio
      operationId: createTranscription
      summary: Transcribes audio into the input language.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/CreateTranscriptionResponseVerboseJson'
                  - $ref: '#/components/schemas/CreateTranscriptionResponseJson'
                  - $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateTranscriptionRequestMultiPart'
  /audio/translations:
    post:
      tags:
        - Audio
      operationId: createTranslation
      summary: Translates audio into English..
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/CreateTranslationResponseVerboseJson'
                  - $ref: '#/components/schemas/CreateTranslationResponseJson'
                  - $ref: '#/components/schemas/ErrorResponse'
            text/plain:
              schema:
                type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateTranslationRequestMultiPart'
  /batches:
    post:
      tags:
        - Batch
      operationId: createBatch
      summary: Creates and executes a batch from an uploaded file of requests
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Batch'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                input_file_id:
                  type: string
                  description: |-
                    The ID of an uploaded file that contains requests for the new batch.

                    See [upload file](/docs/api-reference/files/create) for how to upload a file.

                    Your input file must be formatted as a [JSONL file](/docs/api-reference/batch/requestInput), and must be uploaded with the purpose `batch`.
                endpoint:
                  type: string
                  enum:
                    - /v1/chat/completions
                    - /v1/embeddings
                  description: The endpoint to be used for all requests in the batch. Currently `/v1/chat/completions` and `/v1/embeddings` are supported.
                completion_window:
                  type: string
                  enum:
                    - 24h
                  description: The time frame within which the batch should be processed. Currently only `24h` is supported.
                metadata:
                  type: object
                  additionalProperties:
                    type: string
                  nullable: true
                  description: Optional custom metadata for the batch.
              required:
                - input_file_id
                - endpoint
                - completion_window
    get:
      tags:
        - Batch
      operationId: listBatches
      summary: List your organization's batches.
      parameters:
        - name: after
          in: query
          required: false
          description: A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ListBatchesResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
  /batches/{batch_id}:
    get:
      tags:
        - Batch
      operationId: retrieveBatch
      summary: Retrieves a batch.
      parameters:
        - name: batch_id
          in: path
          required: true
          description: The ID of the batch to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Batch'
                  - $ref: '#/components/schemas/ErrorResponse'
  /batches/{batch_id}/cancel:
    post:
      tags:
        - Batch
      operationId: cancelBatch
      summary: Cancels an in-progress batch.
      parameters:
        - name: batch_id
          in: path
          required: true
          description: The ID of the batch to cancel.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Batch'
                  - $ref: '#/components/schemas/ErrorResponse'
  /chat/completions:
    post:
      tags:
        - Chat
      operationId: createChatCompletion
      summary: Creates a model response for the given chat conversation.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/CreateChatCompletionResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChatCompletionRequest'
  /completions:
    post:
      tags:
        - Completions
      operationId: createCompletion
      summary: Creates a completion for the provided prompt and parameters.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/CreateCompletionResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompletionRequest'
  /embeddings:
    post:
      tags:
        - Embeddings
      operationId: createEmbedding
      summary: Creates an embedding vector representing the input text.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/CreateEmbeddingResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmbeddingRequest'
  /files:
    post:
      tags:
        - Files
      operationId: createFile
      summary: |-
        Upload a file that can be used across various endpoints. The size of all the files uploaded by
        one organization can be up to 100 GB.

        The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See
        the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files
        supported. The Fine-tuning API only supports `.jsonl` files.

        Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/OpenAIFile'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateFileRequestMultiPart'
    get:
      tags:
        - Files
      operationId: listFiles
      summary: Returns a list of files that belong to the user's organization.
      parameters:
        - name: purpose
          in: query
          required: false
          description: Only return files with the given purpose.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ListFilesResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
  /files/{file_id}:
    get:
      tags:
        - Files
      operationId: retrieveFile
      summary: Returns information about a specific file.
      parameters:
        - name: file_id
          in: path
          required: true
          description: The ID of the file to use for this request.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/OpenAIFile'
                  - $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Files
      operationId: deleteFile
      summary: Delete a file
      parameters:
        - name: file_id
          in: path
          required: true
          description: The ID of the file to use for this request.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/DeleteFileResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
  /files/{file_id}/content:
    get:
      tags:
        - Files
      operationId: downloadFile
      summary: Returns the contents of the specified file.
      parameters:
        - name: file_id
          in: path
          required: true
          description: The ID of the file to use for this request.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: string
                    format: byte
                  - $ref: '#/components/schemas/ErrorResponse'
  /fine_tuning/jobs:
    post:
      tags:
        - Fine-tuning
      operationId: createFineTuningJob
      summary: |-
        Creates a fine-tuning job which begins the process of creating a new model from a given dataset.

        Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.

        [Learn more about fine-tuning](/docs/guides/fine-tuning)
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/FineTuningJob'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFineTuningJobRequest'
    get:
      tags:
        - Fine-tuning
      operationId: listPaginatedFineTuningJobs
      summary: List your organization's fine-tuning jobs
      parameters:
        - name: after
          in: query
          required: false
          description: Identifier for the last job from the previous pagination request.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: Number of fine-tuning jobs to retrieve.
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ListPaginatedFineTuningJobsResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
  /fine_tuning/jobs/{fine_tuning_job_id}:
    get:
      tags:
        - Fine-tuning
      operationId: retrieveFineTuningJob
      summary: |-
        Get info about a fine-tuning job.

        [Learn more about fine-tuning](/docs/guides/fine-tuning)
      parameters:
        - name: fine_tuning_job_id
          in: path
          required: true
          description: The ID of the fine-tuning job.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/FineTuningJob'
                  - $ref: '#/components/schemas/ErrorResponse'
  /fine_tuning/jobs/{fine_tuning_job_id}/cancel:
    post:
      tags:
        - Fine-tuning
      operationId: cancelFineTuningJob
      summary: Immediately cancel a fine-tune job.
      parameters:
        - name: fine_tuning_job_id
          in: path
          required: true
          description: The ID of the fine-tuning job to cancel.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/FineTuningJob'
                  - $ref: '#/components/schemas/ErrorResponse'
  /fine_tuning/jobs/{fine_tuning_job_id}/checkpoints:
    get:
      tags:
        - Fine-tuning
      operationId: listFineTuningJobCheckpoints
      summary: List the checkpoints for a fine-tuning job.
      parameters:
        - name: fine_tuning_job_id
          in: path
          required: true
          description: The ID of the fine-tuning job to get checkpoints for.
          schema:
            type: string
        - name: after
          in: query
          required: false
          description: Identifier for the last checkpoint ID from the previous pagination request.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: Number of checkpoints to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ListFineTuningJobCheckpointsResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
  /fine_tuning/jobs/{fine_tuning_job_id}/events:
    get:
      tags:
        - Fine-tuning
      operationId: listFineTuningEvents
      summary: Get status updates for a fine-tuning job.
      parameters:
        - name: fine_tuning_job_id
          in: path
          required: true
          description: The ID of the fine-tuning job to get events for.
          schema:
            type: string
        - name: after
          in: query
          required: false
          description: Identifier for the last event from the previous pagination request.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: Number of events to retrieve.
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ListFineTuningJobEventsResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
  /images/edits:
    post:
      tags:
        - Images
      operationId: createImageEdit
      summary: Creates an edited or extended image given an original image and a prompt.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ImagesResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateImageEditRequestMultiPart'
  /images/generations:
    post:
      tags:
        - Images
      operationId: createImage
      summary: Creates an image given a prompt
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ImagesResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateImageRequest'
  /images/variations:
    post:
      tags:
        - Images
      operationId: createImageVariation
      summary: Creates an edited or extended image given an original image and a prompt.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ImagesResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateImageVariationRequestMultiPart'
  /models:
    get:
      tags:
        - Models
      operationId: listModels
      summary: |-
        Lists the currently available models, and provides basic information about each one such as the
        owner and availability.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ListModelsResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
  /models/{model}:
    get:
      tags:
        - Models
      operationId: retrieveModel
      summary: |-
        Retrieves a model instance, providing basic information about the model such as the owner and
        permissioning.
      parameters:
        - name: model
          in: path
          required: true
          description: The ID of the model to use for this request.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Model'
                  - $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Models
      operationId: deleteModel
      summary: Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
      parameters:
        - name: model
          in: path
          required: true
          description: The model to delete
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/DeleteModelResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
  /moderations:
    post:
      tags:
        - Moderations
      operationId: createModeration
      summary: Classifies if text is potentially harmful.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/CreateModerationResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateModerationRequest'
  /threads:
    post:
      tags:
        - Assistants
      operationId: createThread
      summary: Create a thread.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ThreadObject'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateThreadRequest'
  /threads/runs:
    post:
      tags:
        - Assistants
      operationId: createThreadAndRun
      summary: Create a thread and run it in one request.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/RunObject'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateThreadAndRunRequest'
  /threads/{thread_id}:
    get:
      tags:
        - Assistants
      operationId: getThread
      summary: Retrieves a thread.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the thread to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ThreadObject'
                  - $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Assistants
      operationId: modifyThread
      summary: Modifies a thread.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the thread to modify. Only the `metadata` can be modified.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ThreadObject'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyThreadRequest'
    delete:
      tags:
        - Assistants
      operationId: deleteThread
      summary: Delete a thread.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the thread to delete.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/DeleteThreadResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
  /threads/{thread_id}/messages:
    post:
      tags:
        - Assistants
      operationId: createMessage
      summary: Create a message.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the [thread](/docs/api-reference/threads) to create a message for.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/MessageObject'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageRequest'
    get:
      tags:
        - Assistants
      operationId: listMessages
      summary: Returns a list of messages for a given thread.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the [thread](/docs/api-reference/threads) the messages belong to.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: |-
            A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
            default is 20.
          schema:
            type: integer
            format: int32
            default: 20
        - name: order
          in: query
          required: false
          description: |-
            Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
            for descending order.
          schema:
            $ref: '#/components/schemas/ListOrder'
            default: desc
        - name: after
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `after` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include after=obj_foo in order to fetch the next page of the list.
          schema:
            type: string
        - name: before
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `before` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include before=obj_foo in order to fetch the previous page of the list.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ListMessagesResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
  /threads/{thread_id}/messages/{message_id}:
    get:
      tags:
        - Assistants
      operationId: getMessage
      summary: Retrieve a message.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
          schema:
            type: string
        - name: message_id
          in: path
          required: true
          description: The ID of the message to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/MessageObject'
                  - $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Assistants
      operationId: modifyMessage
      summary: Modifies a message.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the thread to which this message belongs.
          schema:
            type: string
        - name: message_id
          in: path
          required: true
          description: The ID of the message to modify.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/MessageObject'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyMessageRequest'
    delete:
      tags:
        - Assistants
      operationId: deleteMessage
      summary: Deletes a message.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the thread to which this message belongs.
          schema:
            type: string
        - name: message_id
          in: path
          required: true
          description: The ID of the message to delete.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/DeleteMessageResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
  /threads/{thread_id}/runs:
    post:
      tags:
        - Assistants
      operationId: createRun
      summary: Create a run.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the thread to run.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/RunObject'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRunRequest'
    get:
      tags:
        - Assistants
      operationId: listRuns
      summary: Returns a list of runs belonging to a thread.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the thread the run belongs to.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: |-
            A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
            default is 20.
          schema:
            type: integer
            format: int32
            default: 20
        - name: order
          in: query
          required: false
          description: |-
            Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
            for descending order.
          schema:
            $ref: '#/components/schemas/ListOrder'
            default: desc
        - name: after
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `after` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include after=obj_foo in order to fetch the next page of the list.
          schema:
            type: string
        - name: before
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `before` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include before=obj_foo in order to fetch the previous page of the list.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ListRunsResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
  /threads/{thread_id}/runs/{run_id}:
    get:
      tags:
        - Assistants
      operationId: getRun
      summary: Retrieves a run.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the [thread](/docs/api-reference/threads) that was run.
          schema:
            type: string
        - name: run_id
          in: path
          required: true
          description: The ID of the run to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/RunObject'
                  - $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Assistants
      operationId: modifyRun
      summary: Modifies a run.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the [thread](/docs/api-reference/threads) that was run.
          schema:
            type: string
        - name: run_id
          in: path
          required: true
          description: The ID of the run to modify.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/RunObject'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyRunRequest'
  /threads/{thread_id}/runs/{run_id}/cancel:
    post:
      tags:
        - Assistants
      operationId: cancelRun
      summary: Cancels a run that is `in_progress`.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the thread to which this run belongs.
          schema:
            type: string
        - name: run_id
          in: path
          required: true
          description: The ID of the run to cancel.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/RunObject'
                  - $ref: '#/components/schemas/ErrorResponse'
  /threads/{thread_id}/runs/{run_id}/steps:
    get:
      tags:
        - Assistants
      operationId: listRunSteps
      summary: Returns a list of run steps belonging to a run.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the thread the run and run steps belong to.
          schema:
            type: string
        - name: run_id
          in: path
          required: true
          description: The ID of the run the run steps belong to.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: |-
            A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
            default is 20.
          schema:
            type: integer
            format: int32
            default: 20
        - name: order
          in: query
          required: false
          description: |-
            Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
            for descending order.
          schema:
            $ref: '#/components/schemas/ListOrder'
            default: desc
        - name: after
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `after` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include after=obj_foo in order to fetch the next page of the list.
          schema:
            type: string
        - name: before
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `before` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include before=obj_foo in order to fetch the previous page of the list.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ListRunStepsResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
  /threads/{thread_id}/runs/{run_id}/steps/{step_id}:
    get:
      tags:
        - Assistants
      operationId: getRunStep
      summary: Retrieves a run step.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the thread to which the run and run step belongs.
          schema:
            type: string
        - name: run_id
          in: path
          required: true
          description: The ID of the run to which the run step belongs.
          schema:
            type: string
        - name: step_id
          in: path
          required: true
          description: The ID of the run step to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/RunStepObject'
                  - $ref: '#/components/schemas/ErrorResponse'
  /threads/{thread_id}/runs/{run_id}/submit_tool_outputs:
    post:
      tags:
        - Assistants
      operationId: submitToolOutputsToRun
      summary: |-
        When a run has the `status: "requires_action"` and `required_action.type` is
        `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once
        they're all completed. All outputs must be submitted in a single request.
      parameters:
        - name: thread_id
          in: path
          required: true
          description: The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
          schema:
            type: string
        - name: run_id
          in: path
          required: true
          description: The ID of the run that requires the tool output submission.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/RunObject'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitToolOutputsRunRequest'
  /vector_stores:
    get:
      tags:
        - Vector Stores
      operationId: listVectorStores
      summary: Returns a list of vector-stores.
      parameters:
        - name: limit
          in: query
          required: false
          description: |-
            A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
            default is 20.
          schema:
            type: integer
            format: int32
            default: 20
        - name: order
          in: query
          required: false
          description: |-
            Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
            for descending order.
          schema:
            $ref: '#/components/schemas/ListOrder'
            default: desc
        - name: after
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `after` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include after=obj_foo in order to fetch the next page of the list.
          schema:
            type: string
        - name: before
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `before` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include before=obj_foo in order to fetch the previous page of the list.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ListVectorStoresResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Vector Stores
      operationId: createVectorStore
      summary: Creates a vector store.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/VectorStoreObject'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVectorStoreRequest'
  /vector_stores/{vector_store_id}:
    get:
      tags:
        - Vector Stores
      operationId: getVectorStore
      summary: Retrieves a vector store.
      parameters:
        - name: vector_store_id
          in: path
          required: true
          description: The ID of the vector store to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/VectorStoreObject'
                  - $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Vector Stores
      operationId: modifyVectorStore
      summary: Modifies a vector store.
      parameters:
        - name: vector_store_id
          in: path
          required: true
          description: The ID of the vector store to modify.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/VectorStoreObject'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVectorStoreRequest'
    delete:
      tags:
        - Vector Stores
      operationId: deleteVectorStore
      summary: Delete a vector store.
      parameters:
        - name: vector_store_id
          in: path
          required: true
          description: The ID of the vector store to delete.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/DeleteVectorStoreResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
  /vector_stores/{vector_store_id}/file_batches:
    post:
      tags:
        - Vector Stores
      operationId: createVectorStoreFileBatch
      summary: Create a vector store file batch.
      parameters:
        - name: vector_store_id
          in: path
          required: true
          description: The ID of the vector store for which to create a file batch.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/VectorStoreFileBatchObject'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVectorStoreFileBatchRequest'
  /vector_stores/{vector_store_id}/file_batches/{batch_id}:
    get:
      tags:
        - Vector Stores
      operationId: getVectorStoreFileBatch
      summary: Retrieves a vector store file batch.
      parameters:
        - name: vector_store_id
          in: path
          required: true
          description: The ID of the vector store that the file batch belongs to.
          schema:
            type: string
        - name: batch_id
          in: path
          required: true
          description: The ID of the file batch being retrieved.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/VectorStoreFileBatchObject'
                  - $ref: '#/components/schemas/ErrorResponse'
  /vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel:
    post:
      tags:
        - Vector Stores
      operationId: cancelVectorStoreFileBatch
      summary: Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
      parameters:
        - name: vector_store_id
          in: path
          required: true
          description: The ID of the vector store that the file batch belongs to.
          schema:
            type: string
        - name: batch_id
          in: path
          required: true
          description: The ID of the file batch to cancel.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/VectorStoreFileBatchObject'
                  - $ref: '#/components/schemas/ErrorResponse'
  /vector_stores/{vector_store_id}/file_batches/{batch_id}/files:
    get:
      tags:
        - Vector Stores
      operationId: listFilesInVectorStoreBatch
      summary: Returns a list of vector store files in a batch.
      parameters:
        - name: vector_store_id
          in: path
          required: true
          description: The ID of the vector store that the file batch belongs to.
          schema:
            type: string
        - name: batch_id
          in: path
          required: true
          description: The ID of the file batch that the files belong to.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: |-
            A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
            default is 20.
          schema:
            type: integer
            format: int32
            default: 20
        - name: order
          in: query
          required: false
          description: |-
            Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
            for descending order.
          schema:
            $ref: '#/components/schemas/ListOrder'
            default: desc
        - name: after
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `after` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include after=obj_foo in order to fetch the next page of the list.
          schema:
            type: string
        - name: before
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `before` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include before=obj_foo in order to fetch the previous page of the list.
          schema:
            type: string
        - name: filter
          in: query
          required: false
          description: Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
          schema:
            $ref: '#/components/schemas/ListVectorStoreFilesFilter'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ListVectorStoreFilesResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
  /vector_stores/{vector_store_id}/files:
    get:
      tags:
        - Vector Stores
      operationId: listVectorStoreFiles
      summary: Returns a list of vector store files.
      parameters:
        - name: vector_store_id
          in: path
          required: true
          description: The ID of the vector store that the files belong to.
          schema:
            type: string
        - name: limit
          in: query
          required: false
          description: |-
            A limit on the number of objects to be returned. Limit can range between 1 and 100, and the
            default is 20.
          schema:
            type: integer
            format: int32
            default: 20
        - name: order
          in: query
          required: false
          description: |-
            Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and`desc`
            for descending order.
          schema:
            $ref: '#/components/schemas/ListOrder'
            default: desc
        - name: after
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `after` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include after=obj_foo in order to fetch the next page of the list.
          schema:
            type: string
        - name: before
          in: query
          required: false
          description: |-
            A cursor for use in pagination. `before` is an object ID that defines your place in the list.
            For instance, if you make a list request and receive 100 objects, ending with obj_foo, your
            subsequent call can include before=obj_foo in order to fetch the previous page of the list.
          schema:
            type: string
        - name: filter
          in: query
          required: false
          description: Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
          schema:
            $ref: '#/components/schemas/ListVectorStoreFilesFilter'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/ListVectorStoreFilesResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Vector Stores
      operationId: createVectorStoreFile
      summary: Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
      parameters:
        - name: vector_store_id
          in: path
          required: true
          description: The ID of the vector store for which to create a File.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/VectorStoreFileObject'
                  - $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVectorStoreFileRequest'
  /vector_stores/{vector_store_id}/files/{file_id}:
    get:
      tags:
        - Vector Stores
      operationId: getVectorStoreFile
      summary: Retrieves a vector store file.
      parameters:
        - name: vector_store_id
          in: path
          required: true
          description: The ID of the vector store that the file belongs to.
          schema:
            type: string
        - name: file_id
          in: path
          required: true
          description: The ID of the file being retrieved.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/VectorStoreFileObject'
                  - $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Vector Stores
      operationId: deleteVectorStoreFile
      summary: Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
      parameters:
        - name: vector_store_id
          in: path
          required: true
          description: The ID of the vector store that the file belongs to.
          schema:
            type: string
        - name: file_id
          in: path
          required: true
          description: The ID of the file to delete.
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/DeleteVectorStoreFileResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
security:
  - BearerAuth: []
components:
  schemas:
    AssistantObject:
      type: object
      required:
        - id
        - object
        - created_at
        - name
        - description
        - model
        - instructions
        - tools
        - metadata
      properties:
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints.
        object:
          type: string
          enum:
            - assistant
          description: The object type, which is always `assistant`.
        created_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the assistant was created.
        name:
          type: string
          nullable: true
          maxLength: 256
          description: The name of the assistant. The maximum length is 256 characters.
        description:
          type: string
          nullable: true
          maxLength: 512
          description: The description of the assistant. The maximum length is 512 characters.
        model:
          type: string
          description: ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
        instructions:
          type: string
          nullable: true
          maxLength: 256000
          description: The system instructions that the assistant uses. The maximum length is 256,000 characters.
        tools:
          type: array
          items:
            $ref: '#/components/schemas/AssistantToolDefinition'
          maxItems: 128
          description: A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
          x-oaiExpandable: true
          default: []
        tool_resources:
          type: object
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  items:
                    type: string
                  maxItems: 20
                  description: A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.
                  default: []
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  items:
                    type: string
                  maxItems: 1
                  description: The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
          nullable: true
          description: A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
        temperature:
          type: number
          format: float
          nullable: true
          minimum: 0
          maximum: 2
          description: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
          default: 1
        top_p:
          type: number
          format: float
          nullable: true
          minimum: 0
          maximum: 1
          description: |-
            An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or temperature but not both.
          default: 1
        response_format:
          oneOf:
            - $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
      description: Represents an `assistant` that can call the model and use tools.
    AssistantResponseFormat:
      type: object
    AssistantToolDefinition:
      type: object
      required:
        - type
      properties:
        type:
          type: string
      discriminator:
        propertyName: type
        mapping:
          code_interpreter: '#/components/schemas/AssistantToolsCode'
          file_search: '#/components/schemas/AssistantToolsFileSearch'
          function: '#/components/schemas/AssistantToolsFunction'
    AssistantToolsCode:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - code_interpreter
          description: 'The type of tool being defined: `code_interpreter`'
      allOf:
        - $ref: '#/components/schemas/AssistantToolDefinition'
    AssistantToolsFileSearch:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - file_search
          description: 'The type of tool being defined: `file_search`'
        file_search:
          type: object
          properties:
            max_num_results:
              type: integer
              format: int32
              minimum: 1
              maximum: 50
              description: |-
                The maximum number of results the file search tool should output. The default is 20 for gpt-4* models and 5 for gpt-3.5-turbo. This number should be between 1 and 50 inclusive.

                Note that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search/number-of-chunks-returned) for more information.
          description: Overrides for the file search tool.
      allOf:
        - $ref: '#/components/schemas/AssistantToolDefinition'
    AssistantToolsFileSearchTypeOnly:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - file_search
          description: 'The type of tool being defined: `file_search`'
    AssistantToolsFunction:
      type: object
      required:
        - type
        - function
      properties:
        type:
          type: string
          enum:
            - function
          description: 'The type of tool being defined: `function`'
        function:
          $ref: '#/components/schemas/FunctionObject'
      allOf:
        - $ref: '#/components/schemas/AssistantToolDefinition'
    AssistantsApiResponseFormat:
      type: object
      properties:
        type:
          type: string
          enum:
            - text
            - json_object
          description: Must be one of `text` or `json_object`.
          default: text
      description: An object describing the expected output of the model. If `json_object` only `function` type `tools` are allowed to be passed to the Run. If `text` the model can return text or any value needed.
    AssistantsApiResponseFormatOption:
      anyOf:
        - type: string
          enum:
            - none
            - auto
        - $ref: '#/components/schemas/AssistantsApiResponseFormat'
      description: |-
        Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models/gpt-4o), [GPT-4 Turbo](/docs/models/gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.

        Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model generates is valid JSON.

        **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
      x-oaiExpandable: true
    AssistantsApiToolChoiceOption:
      anyOf:
        - type: string
          enum:
            - none
            - auto
            - required
        - $ref: '#/components/schemas/AssistantsNamedToolChoice'
      description: |-
        Controls which (if any) tool is called by the model.
        `none` means the model will not call any tools and instead generates a message.
        `auto` is the default value and means the model can pick between generating a message or calling one or more tools.
        `required` means the model must call one or more tools before responding to the user.
        Specifying a particular tool like `{"type": "file_search"}` or `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
      x-oaiExpandable: true
    AssistantsNamedToolChoice:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - function
            - code_interpreter
            - file_search
          description: The type of the tool. If type is `function`, the function name must be set
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
          required:
            - name
      description: Specifies a tool the model should use. Use to force the model to call a specific tool.
    AutoChunkingStrategyRequestParam:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - auto
          description: Always `auto`.
      allOf:
        - $ref: '#/components/schemas/FileChunkingStrategyRequestParam'
      description: The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
    AutoChunkingStrategyResponseParam:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - auto
      allOf:
        - $ref: '#/components/schemas/FileChunkingStrategyResponseParam'
    Batch:
      type: object
      required:
        - id
        - object
        - endpoint
        - input_file_id
        - completion_window
        - status
        - created_at
      properties:
        id:
          type: string
        object:
          type: string
          enum:
            - batch
          description: The object type, which is always `batch`.
        endpoint:
          type: string
          description: The OpenAI API endpoint used by the batch.
        errors:
          type: object
          properties:
            object:
              type: string
              enum:
                - list
              description: The object type, which is always `list`.
            data:
              type: array
              items:
                type: object
                properties:
                  code:
                    type: string
                    description: An error code identifying the error type.
                  message:
                    type: string
                    description: A human-readable message providing more details about the error.
                  param:
                    type: string
                    nullable: true
                    description: The name of the parameter that caused the error, if applicable.
                  line:
                    type: integer
                    format: int32
                    nullable: true
                    description: The line number of the input file where the error occurred, if applicable.
        input_file_id:
          type: string
          description: The ID of the input file for the batch.
        completion_window:
          type: string
          description: The time frame within which the batch should be processed.
        status:
          type: string
          enum:
            - validating
            - failed
            - in_progress
            - finalizing
            - completed
            - expired
            - cancelling
            - cancelled
          description: The current status of the batch.
        output_file_id:
          type: string
          description: The ID of the file containing the outputs of successfully executed requests.
        error_file_id:
          type: string
          description: The ID of the file containing the outputs of requests with errors.
        created_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the batch was created.
        in_progress_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the batch started processing.
        expires_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the batch will expire.
        finalizing_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the batch started finalizing.
        completed_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the batch was completed.
        failed_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the batch failed.
        expired_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the batch expired.
        cancelling_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the batch started cancelling.
        cancelled_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the batch was cancelled.
        request_counts:
          type: object
          properties:
            total:
              type: integer
              format: int32
              description: Total number of requests in the batch.
            completed:
              type: integer
              format: int32
              description: Number of requests that have been completed successfully.
            failed:
              type: integer
              format: int32
              description: Number of requests that have failed.
          required:
            - total
            - completed
            - failed
          description: The request counts for different statuses within the batch.
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
    BatchRequestInput:
      type: object
      properties:
        custom_id:
          type: string
          description: A developer-provided per-request id that will be used to match outputs to inputs. Must be unique for each request in a batch.
        method:
          type: string
          enum:
            - POST
          description: The HTTP method to be used for the request. Currently only `POST` is supported.
        url:
          type: string
          format: uri
          description: The OpenAI API relative URL to be used for the request. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported.
      description: The per-line object of the batch input file
    BatchRequestOutput:
      type: object
      properties:
        id:
          type: string
        custom_id:
          type: string
          description: A developer-provided per-request id that will be used to match outputs to inputs.
        response:
          type: object
          properties:
            status_code:
              type: integer
              format: int32
              description: The HTTP status code of the response
            request_id:
              type: string
              description: An unique identifier for the OpenAI API request. Please include this request ID when contacting support.
            body:
              type: object
              additionalProperties:
                type: string
              description: The JSON body of the response
              x-oaiTypeLabel: map
          nullable: true
        error:
          type: object
          properties:
            code:
              type: string
              description: A machine-readable error code.
            message:
              type: string
              description: A human-readable error message.
          nullable: true
          description: For requests that failed with a non-HTTP error, this will contain more information on the cause of the failure.
      description: The per-line object of the batch output and error files
    ChatCompletionFunctionCallOption:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the function to call.
      description: 'Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.'
    ChatCompletionFunctionChoice:
      type: object
    ChatCompletionFunctions:
      type: object
      required:
        - name
      properties:
        description:
          type: string
          description: A description of what the function does, used by the model to choose when and how to call the function.
        name:
          type: string
          description: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
        parameters:
          $ref: '#/components/schemas/FunctionParameters'
      deprecated: true
    ChatCompletionMessageToolCall:
      type: object
      required:
        - id
        - type
        - function
      properties:
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          enum:
            - function
          description: The type of the tool. Currently, only `function` is supported.
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
            arguments:
              type: string
              description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
          required:
            - name
            - arguments
          description: The function that the model called.
    ChatCompletionMessageToolCallChunk:
      type: object
      required:
        - index
      properties:
        index:
          type: integer
          format: int32
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          enum:
            - function
          description: The type of the tool. Currently, only `function` is supported.
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
            arguments:
              type: string
              description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
    ChatCompletionMessageToolCallsItem:
      type: array
      items:
        $ref: '#/components/schemas/ChatCompletionMessageToolCall'
      description: The tool calls generated by the model, such as function calls.
    ChatCompletionNamedToolChoice:
      type: object
      required:
        - type
        - function
      properties:
        type:
          type: string
          enum:
            - function
          description: The type of the tool. Currently, only `function` is supported.
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
          required:
            - name
      description: Specifies a tool the model should use. Use to force the model to call a specific function.
    ChatCompletionRequestAssistantMessage:
      type: object
      required:
        - role
      properties:
        content:
          type: string
          nullable: true
          description: The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
        role:
          type: string
          enum:
            - assistant
          description: The role of the messages author, in this case `assistant`.
        name:
          type: string
          description: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
        tool_calls:
          $ref: '#/components/schemas/ChatCompletionMessageToolCallsItem'
        function_call:
          type: object
          properties:
            arguments:
              type: string
              description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
            name:
              type: string
              description: The name of the function to call.
          required:
            - arguments
            - name
          nullable: true
          description: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
          deprecated: true
      allOf:
        - $ref: '#/components/schemas/ChatCompletionRequestMessage'
    ChatCompletionRequestFunctionMessage:
      type: object
      required:
        - role
        - content
        - name
      properties:
        role:
          type: string
          enum:
            - function
          description: The role of the messages author, in this case `function`.
        content:
          type: string
          nullable: true
          description: The contents of the function message.
        name:
          type: string
          description: The name of the function to call.
      allOf:
        - $ref: '#/components/schemas/ChatCompletionRequestMessage'
      deprecated: true
    ChatCompletionRequestMessage:
      type: object
      required:
        - role
      properties:
        role:
          type: string
          description: The role of the author of this message.
      discriminator:
        propertyName: role
        mapping:
          system: '#/components/schemas/ChatCompletionRequestSystemMessage'
          user: '#/components/schemas/ChatCompletionRequestUserMessage'
          assistant: '#/components/schemas/ChatCompletionRequestAssistantMessage'
          tool: '#/components/schemas/ChatCompletionRequestToolMessage'
          function: '#/components/schemas/ChatCompletionRequestFunctionMessage'
      x-oaiExpandable: true
    ChatCompletionRequestMessageContentPart:
      anyOf:
        - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
        - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartImage'
      x-oaiExpandable: true
    ChatCompletionRequestMessageContentPartImage:
      type: object
      required:
        - type
        - image_url
      properties:
        type:
          type: string
          enum:
            - image_url
          description: The type of the content part.
        image_url:
          type: object
          properties:
            url:
              type: string
              format: uri
              description: Either a URL of the image or the base64 encoded image data.
            detail:
              type: string
              enum:
                - auto
                - low
                - high
              description: Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision/low-or-high-fidelity-image-understanding).
              default: auto
          required:
            - url
    ChatCompletionRequestMessageContentPartText:
      type: object
      required:
        - type
        - text
      properties:
        type:
          type: string
          enum:
            - text
          description: The type of the content part.
        text:
          type: string
          description: The text content.
    ChatCompletionRequestSystemMessage:
      type: object
      required:
        - content
        - role
      properties:
        content:
          type: string
          description: The contents of the system message.
        role:
          type: string
          enum:
            - system
          description: The role of the messages author, in this case `system`.
        name:
          type: string
          description: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
      allOf:
        - $ref: '#/components/schemas/ChatCompletionRequestMessage'
    ChatCompletionRequestToolMessage:
      type: object
      required:
        - role
        - content
        - tool_call_id
      properties:
        role:
          type: string
          enum:
            - tool
          description: The role of the messages author, in this case `tool`.
        content:
          type: string
          description: The contents of the tool message.
        tool_call_id:
          type: string
          description: Tool call that this message is responding to.
      allOf:
        - $ref: '#/components/schemas/ChatCompletionRequestMessage'
    ChatCompletionRequestUserMessage:
      type: object
      required:
        - content
        - role
      properties:
        content:
          anyOf:
            - type: string
            - type: array
              items:
                $ref: '#/components/schemas/ChatCompletionRequestMessageContentPart'
          description: The contents of the user message.
          x-oaiExpandable: true
        role:
          type: string
          enum:
            - user
          description: The role of the messages author, in this case `user`.
        name:
          type: string
          description: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
      allOf:
        - $ref: '#/components/schemas/ChatCompletionRequestMessage'
    ChatCompletionResponseMessage:
      type: object
      required:
        - content
        - role
      properties:
        content:
          type: string
          nullable: true
          description: The contents of the message.
        tool_calls:
          $ref: '#/components/schemas/ChatCompletionMessageToolCallsItem'
        role:
          type: string
          enum:
            - assistant
          description: The role of the author of this message.
        function_call:
          type: object
          properties:
            arguments:
              type: string
              description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
            name:
              type: string
              description: The name of the function to call.
          required:
            - arguments
            - name
          description: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
          deprecated: true
      description: A chat completion message generated by the model.
    ChatCompletionRole:
      type: string
      enum:
        - system
        - user
        - assistant
        - tool
        - function
      description: The role of the author of a message
    ChatCompletionStreamOptions:
      type: object
      properties:
        include_usage:
          type: boolean
          description: 'If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array. All other chunks will also include a `usage` field, but with a null value.'
      description: 'Options for streaming response. Only set this when you set `stream: true`.'
    ChatCompletionStreamResponseDelta:
      type: object
      properties:
        content:
          type: string
          nullable: true
          description: The contents of the chunk message.
        function_call:
          type: object
          properties:
            arguments:
              type: string
              description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
            name:
              type: string
              description: The name of the function to call.
          description: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
          deprecated: true
        tool_calls:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionMessageToolCallChunk'
        role:
          type: string
          enum:
            - system
            - user
            - assistant
            - tool
          description: The role of the author of this message.
      description: A chat completion delta generated by streamed model responses.
    ChatCompletionTokenLogprob:
      type: object
      required:
        - token
        - logprob
        - bytes
        - top_logprobs
      properties:
        token:
          type: string
          description: The token.
        logprob:
          type: number
          format: float
          description: The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
        bytes:
          type: object
          allOf:
            - $ref: '#/components/schemas/ChatCompletionTokenLogprobBytesItem'
          nullable: true
          description: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
        top_logprobs:
          type: array
          items:
            type: object
            properties:
              token:
                type: string
                description: The token.
              logprob:
                type: number
                format: float
                description: The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
              bytes:
                type: array
                items:
                  type: integer
                  format: int32
                nullable: true
                description: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
            required:
              - token
              - logprob
              - bytes
          description: List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
    ChatCompletionTokenLogprobBytesItem:
      type: array
      items:
        type: integer
        format: int32
    ChatCompletionTool:
      type: object
      required:
        - type
        - function
      properties:
        type:
          type: string
          enum:
            - function
          description: The type of the tool. Currently, only `function` is supported.
        function:
          $ref: '#/components/schemas/FunctionObject'
    ChatCompletionToolChoice:
      type: object
    ChatCompletionToolChoiceOption:
      anyOf:
        - type: string
          enum:
            - none
            - auto
            - required
        - $ref: '#/components/schemas/ChatCompletionNamedToolChoice'
      description: |-
        Controls which (if any) tool is called by the model.
        `none` means the model will not call any tool and instead generates a message.
        `auto` means the model can pick between generating a message or calling one or more tools.
        `required` means the model must call one or more tools.
        Specifying a particular tool via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.

        `none` is the default when no tools are present. `auto` is the default if tools are present.
      x-oaiExpandable: true
    ChatMessageContentPart:
      type: object
    ChunkingStrategyRequestParam:
      anyOf:
        - $ref: '#/components/schemas/AutoChunkingStrategyRequestParam'
        - $ref: '#/components/schemas/StaticChunkingStrategyRequestParam'
      description: The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
      x-oaiExpandable: true
    CompletionUsage:
      type: object
      required:
        - completion_tokens
        - prompt_tokens
        - total_tokens
      properties:
        completion_tokens:
          type: integer
          format: int32
          description: Number of tokens in the generated completion.
        prompt_tokens:
          type: integer
          format: int32
          description: Number of tokens in the prompt.
        total_tokens:
          type: integer
          format: int32
          description: Total number of tokens used in the request (prompt + completion).
      description: Usage statistics for the completion request.
    CreateAssistantRequest:
      type: object
      required:
        - model
      properties:
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - gpt-4o
                - gpt-4o-2024-05-13
                - gpt-4-turbo
                - gpt-4-turbo-2024-04-09
                - gpt-4-0125-preview
                - gpt-4-turbo-preview
                - gpt-4-1106-preview
                - gpt-4-vision-preview
                - gpt-4
                - gpt-4-0314
                - gpt-4-0613
                - gpt-4-32k
                - gpt-4-32k-0314
                - gpt-4-32k-0613
                - gpt-3.5-turbo
                - gpt-3.5-turbo-16k
                - gpt-3.5-turbo-0613
                - gpt-3.5-turbo-1106
                - gpt-3.5-turbo-0125
                - gpt-3.5-turbo-16k-0613
          description: ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
          x-oaiTypeLabel: string
        name:
          type: string
          nullable: true
          maxLength: 256
          description: The name of the assistant. The maximum length is 256 characters.
        description:
          type: string
          nullable: true
          maxLength: 512
          description: The description of the assistant. The maximum length is 512 characters.
        instructions:
          type: string
          nullable: true
          maxLength: 256000
          description: The system instructions that the assistant uses. The maximum length is 256,000 characters.
        tools:
          type: array
          items:
            $ref: '#/components/schemas/AssistantToolDefinition'
          maxItems: 128
          description: A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
          x-oaiExpandable: true
          default: []
        tool_resources:
          type: object
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  items:
                    type: string
                  maxItems: 20
                  description: A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                  default: []
            file_search:
              anyOf:
                - $ref: '#/components/schemas/CreateAssistantRequestToolResourcesFileSearchVectorStoreIdReferences'
                - $ref: '#/components/schemas/CreateAssistantRequestToolResourcesFileSearchVectorStoreCreationHelpers'
          nullable: true
          description: A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
        temperature:
          type: number
          format: float
          nullable: true
          minimum: 0
          maximum: 2
          description: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
          default: 1
        top_p:
          type: number
          format: float
          nullable: true
          minimum: 0
          maximum: 1
          description: |-
            An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or temperature but not both.
          default: 1
        response_format:
          oneOf:
            - $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
    CreateAssistantRequestToolResourcesFileSearchBase:
      type: object
    CreateAssistantRequestToolResourcesFileSearchVectorStoreCreationHelpers:
      type: object
      properties:
        vector_stores:
          type: array
          items:
            type: object
            properties:
              file_ids:
                type: array
                items:
                  type: string
                maxItems: 10000
                description: |-
                  A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be
                  a maximum of 10000 files in a vector store.
              metadata:
                type: object
                additionalProperties:
                  type: string
                description: |-
                  Set of 16 key-value pairs that can be attached to a vector store. This can be useful for
                  storing additional information about the vector store in a structured format. Keys can
                  be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                x-oaiTypeLabel: map
          maxItems: 1
          description: |-
            A helper to create a [vector store](/docs/api-reference/vector-stores/object) with
            file_ids and attach it to this assistant. There can be a maximum of 1 vector store
            attached to the assistant.
    CreateAssistantRequestToolResourcesFileSearchVectorStoreIdReferences:
      type: object
      properties:
        vector_store_ids:
          type: array
          items:
            type: string
          maxItems: 1
          description: |-
            The [vector store](/docs/api-reference/vector-stores/object) attached to this assistant.
            There can be a maximum of 1 vector store attached to the assistant.
    CreateChatCompletionFunctionResponse:
      type: object
      required:
        - id
        - choices
        - created
        - model
        - object
      properties:
        id:
          type: string
          description: A unique identifier for the chat completion.
        choices:
          type: array
          items:
            type: object
            properties:
              finish_reason:
                type: string
                enum:
                  - stop
                  - length
                  - function_call
                  - content_filter
                description: The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, or `function_call` if the model called a function.
              index:
                type: integer
                format: int32
                description: The index of the choice in the list of choices.
              message:
                $ref: '#/components/schemas/ChatCompletionResponseMessage'
            required:
              - finish_reason
              - index
              - message
          description: A list of chat completion choices. Can be more than one if `n` is greater than 1.
        created:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) of when the chat completion was created.
        model:
          type: string
          description: The model used for the chat completion.
        system_fingerprint:
          type: string
          description: |-
            This fingerprint represents the backend configuration that the model runs with.

            Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
        object:
          type: string
          enum:
            - chat.completion
          description: The object type, which is always `chat.completion`.
        usage:
          $ref: '#/components/schemas/CompletionUsage'
      description: Represents a chat completion response returned by model, based on the provided input.
    CreateChatCompletionRequest:
      type: object
      required:
        - messages
        - model
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionRequestMessage'
          minItems: 1
          description: A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - gpt-4o
                - gpt-4o-2024-05-13
                - gpt-4-turbo
                - gpt-4-turbo-2024-04-09
                - gpt-4-0125-preview
                - gpt-4-turbo-preview
                - gpt-4-1106-preview
                - gpt-4-vision-preview
                - gpt-4
                - gpt-4-0314
                - gpt-4-0613
                - gpt-4-32k
                - gpt-4-32k-0314
                - gpt-4-32k-0613
                - gpt-3.5-turbo
                - gpt-3.5-turbo-16k
                - gpt-3.5-turbo-0301
                - gpt-3.5-turbo-0613
                - gpt-3.5-turbo-1106
                - gpt-3.5-turbo-0125
                - gpt-3.5-turbo-16k-0613
          description: ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
          x-oaiTypeLabel: string
        frequency_penalty:
          type: number
          format: float
          nullable: true
          minimum: -2
          maximum: 2
          description: |-
            Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.

            [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
          default: 0
        logit_bias:
          type: object
          additionalProperties:
            type: integer
            format: int32
          nullable: true
          description: |-
            Modify the likelihood of specified tokens appearing in the completion.

            Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
          x-oaiTypeLabel: map
          default: null
        logprobs:
          type: boolean
          nullable: true
          description: Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.
          default: false
        top_logprobs:
          type: integer
          format: int32
          nullable: true
          minimum: 0
          maximum: 20
          description: An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
        max_tokens:
          type: integer
          format: int32
          nullable: true
          description: |-
            The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.

            The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
        n:
          type: integer
          format: int32
          nullable: true
          minimum: 1
          maximum: 128
          description: How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
          default: 1
        presence_penalty:
          type: number
          format: float
          nullable: true
          minimum: -2
          maximum: 2
          description: |-
            Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.

            [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
          default: 0
        response_format:
          type: object
          properties:
            type:
              type: string
              enum:
                - text
                - json_object
              description: Must be one of `text` or `json_object`.
              default: text
          description: |-
            An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.

            Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model generates is valid JSON.

            **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
        seed:
          type: integer
          format: int64
          nullable: true
          description: |-
            This feature is in Beta.
            If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
            Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
        stop:
          anyOf:
            - type: string
            - type: array
              items:
                type: string
          nullable: true
          description: Up to 4 sequences where the API will stop generating further tokens.
          default: null
        stream:
          type: boolean
          nullable: true
          description: 'If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).'
          default: false
        stream_options:
          type: object
          allOf:
            - $ref: '#/components/schemas/ChatCompletionStreamOptions'
          nullable: true
          default: null
        temperature:
          type: number
          format: float
          nullable: true
          minimum: 0
          maximum: 2
          description: |-
            What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

            We generally recommend altering this or `top_p` but not both.
          default: 1
        top_p:
          type: number
          format: float
          nullable: true
          minimum: 0
          maximum: 1
          description: |-
            An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or `temperature` but not both.
          default: 1
        tools:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionTool'
          description: A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
        tool_choice:
          $ref: '#/components/schemas/ChatCompletionToolChoiceOption'
        parallel_tool_calls:
          type: boolean
          default: true
        user:
          type: string
          description: A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
        function_call:
          anyOf:
            - type: string
              enum:
                - none
                - auto
            - $ref: '#/components/schemas/ChatCompletionFunctionCallOption'
          description: |-
            Deprecated in favor of `tool_choice`.

            Controls which (if any) function is called by the model.
            `none` means the model will not call a function and instead generates a message.
            `auto` means the model can pick between generating a message or calling a function.
            Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.

            `none` is the default when no functions are present. `auto` is the default if functions are present.
          deprecated: true
          x-oaiExpandable: true
        functions:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionFunctions'
          minItems: 1
          maxItems: 128
          description: |-
            Deprecated in favor of `tools`.

            A list of functions the model may generate JSON inputs for.
          deprecated: true
    CreateChatCompletionResponse:
      type: object
      required:
        - id
        - choices
        - created
        - model
        - object
      properties:
        id:
          type: string
          description: A unique identifier for the chat completion.
        choices:
          type: array
          items:
            type: object
            properties:
              finish_reason:
                type: string
                enum:
                  - stop
                  - length
                  - tool_calls
                  - content_filter
                  - function_call
                description: |-
                  The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                  `length` if the maximum number of tokens specified in the request was reached,
                  `content_filter` if content was omitted due to a flag from our content filters,
                  `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
              index:
                type: integer
                format: int32
                description: The index of the choice in the list of choices.
              message:
                $ref: '#/components/schemas/ChatCompletionResponseMessage'
              logprobs:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                    description: A list of message content tokens with log probability information.
                required:
                  - content
                nullable: true
                description: Log probability information for the choice.
            required:
              - finish_reason
              - index
              - message
              - logprobs
          description: A list of chat completion choices. Can be more than one if `n` is greater than 1.
        created:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) of when the chat completion was created.
        model:
          type: string
          description: The model used for the chat completion.
        system_fingerprint:
          type: string
          description: |-
            This fingerprint represents the backend configuration that the model runs with.

            Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
        object:
          type: string
          enum:
            - chat.completion
          description: The object type, which is always `chat.completion`.
        usage:
          $ref: '#/components/schemas/CompletionUsage'
      description: Represents a chat completion response returned by model, based on the provided input.
    CreateChatCompletionStreamResponse:
      type: object
      required:
        - id
        - choices
        - created
        - model
        - object
      properties:
        id:
          type: string
          description: A unique identifier for the chat completion. Each chunk has the same ID.
        choices:
          type: array
          items:
            type: object
            properties:
              delta:
                $ref: '#/components/schemas/ChatCompletionStreamResponseDelta'
              logprobs:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                    description: A list of message content tokens with log probability information.
                required:
                  - content
                nullable: true
                description: Log probability information for the choice.
              finish_reason:
                type: string
                enum:
                  - stop
                  - length
                  - tool_calls
                  - content_filter
                  - function_call
                nullable: true
                description: |-
                  The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                  `length` if the maximum number of tokens specified in the request was reached,
                  `content_filter` if content was omitted due to a flag from our content filters,
                  `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
              index:
                type: integer
                format: int32
                description: The index of the choice in the list of choices.
            required:
              - delta
              - finish_reason
              - index
          description: |-
            A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the
            last chunk if you set `stream_options: {"include_usage": true}`.
        created:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.
        model:
          type: string
          description: The model to generate the completion.
        system_fingerprint:
          type: string
          description: |-
            This fingerprint represents the backend configuration that the model runs with.
            Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
        object:
          type: string
          enum:
            - chat.completion.chunk
          description: The object type, which is always `chat.completion.chunk`.
        usage:
          type: object
          properties:
            completion_tokens:
              type: integer
              format: int32
              description: Number of tokens in the generated completion.
            prompt_tokens:
              type: integer
              format: int32
              description: Number of tokens in the prompt.
            total_tokens:
              type: integer
              format: int32
              description: Total number of tokens used in the request (prompt + completion).
          required:
            - completion_tokens
            - prompt_tokens
            - total_tokens
          description: |-
            An optional field that will only be present when you set `stream_options: {"include_usage": true}` in your request.
            When present, it contains a null value except for the last chunk which contains the token usage statistics for the entire request.
      description: Represents a streamed chunk of a chat completion response returned by model, based on the provided input.
    CreateCompletionRequest:
      type: object
      required:
        - model
        - prompt
      properties:
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - gpt-3.5-turbo-instruct
                - davinci-002
                - babbage-002
          description: ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
          x-oaiTypeLabel: string
        prompt:
          anyOf:
            - type: string
            - type: array
              items:
                type: string
            - type: array
              items:
                type: integer
                format: int32
            - type: array
              items:
                type: array
                items:
                  type: integer
                  format: int32
          nullable: true
          description: |-
            The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.

            Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
          default: <|endoftext|>
        best_of:
          type: integer
          format: int32
          nullable: true
          minimum: 0
          maximum: 20
          description: |-
            Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.

            When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.

            **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
          default: 1
        echo:
          type: boolean
          nullable: true
          description: Echo back the prompt in addition to the completion
          default: false
        frequency_penalty:
          type: number
          format: float
          nullable: true
          minimum: -2
          maximum: 2
          description: |-
            Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.

            [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
          default: 0
        logit_bias:
          type: object
          additionalProperties:
            type: integer
            format: int32
          nullable: true
          description: |-
            Modify the likelihood of specified tokens appearing in the completion.

            Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.

            As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
          x-oaiTypeLabel: map
          default: null
        logprobs:
          type: integer
          format: int32
          nullable: true
          minimum: 0
          maximum: 5
          description: |-
            Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.

            The maximum value for `logprobs` is 5.
          default: null
        max_tokens:
          type: integer
          format: int32
          nullable: true
          minimum: 0
          description: |-
            The maximum number of [tokens](/tokenizer) that can be generated in the completion.

            The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
          default: 16
        n:
          type: integer
          format: int32
          nullable: true
          minimum: 1
          maximum: 128
          description: |-
            How many completions to generate for each prompt.

            **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
          default: 1
        presence_penalty:
          type: number
          format: float
          nullable: true
          minimum: -2
          maximum: 2
          description: |-
            Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.

            [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
          default: 0
        seed:
          type: integer
          format: int64
          nullable: true
          description: |-
            If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.

            Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
        stop:
          anyOf:
            - type: string
            - type: array
              items:
                type: string
          nullable: true
          description: Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
          default: null
        stream:
          type: boolean
          nullable: true
          description: 'Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).'
          default: false
        stream_options:
          type: object
          allOf:
            - $ref: '#/components/schemas/ChatCompletionStreamOptions'
          nullable: true
          default: null
        suffix:
          type: string
          nullable: true
          description: |-
            The suffix that comes after a completion of inserted text.

            This parameter is only supported for `gpt-3.5-turbo-instruct`.
          default: null
        temperature:
          type: number
          format: float
          nullable: true
          minimum: 0
          maximum: 2
          description: |-
            What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

            We generally recommend altering this or `top_p` but not both.
          default: 1
        top_p:
          type: number
          format: float
          nullable: true
          minimum: 0
          maximum: 1
          description: |-
            An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or `temperature` but not both.
          default: 1
        user:
          type: string
          description: A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
    CreateCompletionResponse:
      type: object
      required:
        - id
        - choices
        - created
        - model
        - object
      properties:
        id:
          type: string
          description: A unique identifier for the completion.
        choices:
          type: array
          items:
            type: object
            properties:
              finish_reason:
                type: string
                enum:
                  - stop
                  - length
                  - content_filter
                description: |-
                  The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                  `length` if the maximum number of tokens specified in the request was reached,
                  or `content_filter` if content was omitted due to a flag from our content filters.
              index:
                type: integer
                format: int32
              logprobs:
                type: object
                properties:
                  text_offset:
                    type: array
                    items:
                      type: integer
                      format: int32
                  token_logprobs:
                    type: array
                    items:
                      type: number
                      format: float
                  tokens:
                    type: array
                    items:
                      type: string
                  top_logprobs:
                    type: array
                    items:
                      type: object
                      additionalProperties:
                        type: number
                        format: float
                nullable: true
              text:
                type: string
            required:
              - finish_reason
              - index
              - logprobs
              - text
          description: The list of completion choices the model generated for the input prompt.
        created:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) of when the completion was created.
        model:
          type: string
          description: The model used for completion.
        system_fingerprint:
          type: string
          description: |-
            This fingerprint represents the backend configuration that the model runs with.

            Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
        object:
          type: string
          enum:
            - text_completion
          description: The object type, which is always "text_completion"
        usage:
          $ref: '#/components/schemas/CompletionUsage'
      description: 'Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).'
    CreateEmbeddingRequest:
      type: object
      required:
        - input
        - model
      properties:
        input:
          anyOf:
            - type: string
            - type: array
              items:
                type: string
            - type: array
              items:
                type: integer
                format: int32
            - type: array
              items:
                type: array
                items:
                  type: integer
                  format: int32
          description: Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
          x-oaiExpandable: true
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - text-embedding-ada-002
                - text-embedding-3-small
                - text-embedding-3-large
          description: ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
          x-oaiTypeLabel: string
        encoding_format:
          type: string
          enum:
            - float
            - base64
          description: The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
          default: float
        dimensions:
          type: integer
          format: int32
          minimum: 1
          description: The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.
        user:
          type: string
          description: A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
    CreateEmbeddingResponse:
      type: object
      required:
        - data
        - model
        - object
        - usage
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Embedding'
          description: The list of embeddings generated by the model.
        model:
          type: string
          description: The name of the model used to generate the embedding.
        object:
          type: string
          enum:
            - list
          description: The object type, which is always "list".
        usage:
          type: object
          properties:
            prompt_tokens:
              type: integer
              format: int32
              description: The number of tokens used by the prompt.
            total_tokens:
              type: integer
              format: int32
              description: The total number of tokens used by the request.
          required:
            - prompt_tokens
            - total_tokens
          description: The usage information for the request.
    CreateFileRequestMultiPart:
      type: object
      required:
        - file
        - purpose
      properties:
        file:
          type: string
          format: binary
          description: The File object (not file name) to be uploaded.
        purpose:
          type: string
          enum:
            - assistants
            - batch
            - fine-tune
            - vision
          description: |-
            The intended purpose of the uploaded file.

            Use "assistants" for [Assistants](/docs/api-reference/assistants) and [Message](/docs/api-reference/messages) files, "vision" for Assistants image file inputs, "batch" for [Batch API](/docs/guides/batch), and "fine-tune" for [Fine-tuning](/docs/api-reference/fine-tuning).
    CreateFineTuningJobRequest:
      type: object
      required:
        - model
        - training_file
      properties:
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - babbage-002
                - davinci-002
                - gpt-3.5-turbo
                - gpt-4o-mini
          description: |-
            The name of the model to fine-tune. You can select one of the
            [supported models](/docs/guides/fine-tuning/which-models-can-be-fine-tuned).
          x-oaiTypeLabel: string
        training_file:
          type: string
          description: |-
            The ID of an uploaded file that contains training data.

            See [upload file](/docs/api-reference/files/create) for how to upload a file.

            Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.

            The contents of the file should differ depending on if the model uses the [chat](/docs/api-reference/fine-tuning/chat-input) or [completions](/docs/api-reference/fine-tuning/completions-input) format.

            See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
        hyperparameters:
          allOf:
            - $ref: '#/components/schemas/CreateFineTuningJobRequestHyperparameters'
          description: The hyperparameters used for the fine-tuning job.
        suffix:
          type: string
          nullable: true
          minLength: 1
          maxLength: 40
          description: |-
            A string of up to 18 characters that will be added to your fine-tuned model name.

            For example, a `suffix` of "custom-model-name" would produce a model name like `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.
          default: null
        validation_file:
          type: string
          nullable: true
          description: |-
            The ID of an uploaded file that contains validation data.

            If you provide this file, the data is used to generate validation
            metrics periodically during fine-tuning. These metrics can be viewed in
            the fine-tuning results file.
            The same data should not be present in both train and validation files.

            Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.

            See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
        integrations:
          type: object
          allOf:
            - $ref: '#/components/schemas/CreateFineTuningJobRequestIntegrations'
          nullable: true
          description: A list of integrations to enable for your fine-tuning job.
        seed:
          type: integer
          format: int32
          nullable: true
          minimum: 0
          maximum: 2147483647
          description: |-
            The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases.
            If a seed is not specified, one will be generated for you.
    CreateFineTuningJobRequestHyperparameters:
      type: object
      properties:
        n_epochs:
          anyOf:
            - $ref: '#/components/schemas/CreateFineTuningJobRequestHyperparametersNEpochsChoiceEnum'
            - type: integer
              format: int32
          minimum: 1
          maximum: 50
          description: |-
            The number of epochs to train the model for. An epoch refers to one full cycle
            through the training dataset.
          default: auto
        batch_size:
          anyOf:
            - $ref: '#/components/schemas/CreateFineTuningJobRequestHyperparametersBatchSizeChoiceEnum'
            - type: integer
              format: int32
          minimum: 1
          maximum: 256
          description: |-
            Number of examples in each batch. A larger batch size means that model parameters
            are updated less frequently, but with lower variance.
          default: auto
        learning_rate_multiplier:
          anyOf:
            - $ref: '#/components/schemas/CreateFineTuningJobRequestHyperparametersLearningRateMultiplierChoiceEnum'
            - type: number
              format: float
          minimum: 0
          description: |-
            Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
            overfitting.
          default: auto
    CreateFineTuningJobRequestHyperparametersBatchSizeChoiceEnum:
      type: string
      enum:
        - auto
    CreateFineTuningJobRequestHyperparametersLearningRateMultiplierChoiceEnum:
      type: string
      enum:
        - auto
    CreateFineTuningJobRequestHyperparametersNEpochsChoiceEnum:
      type: string
      enum:
        - auto
    CreateFineTuningJobRequestIntegration:
      type: object
      required:
        - type
      properties:
        type:
          type: string
      discriminator:
        propertyName: type
        mapping:
          wandb: '#/components/schemas/CreateFineTuningJobRequestWandbIntegration'
    CreateFineTuningJobRequestIntegrations:
      type: array
      items:
        $ref: '#/components/schemas/CreateFineTuningJobRequestIntegration'
    CreateFineTuningJobRequestWandbIntegration:
      type: object
      required:
        - type
        - wandb
      properties:
        type:
          type: string
          enum:
            - wandb
        wandb:
          type: object
          properties:
            project:
              type: string
            name:
              type: string
              nullable: true
            entity:
              type: string
              nullable: true
            tags:
              type: array
              items:
                type: string
          required:
            - project
      allOf:
        - $ref: '#/components/schemas/CreateFineTuningJobRequestIntegration'
    CreateImageEditRequestMultiPart:
      type: object
      required:
        - image
        - prompt
      properties:
        image:
          type: string
          format: binary
          description: The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
        prompt:
          type: string
          description: A text description of the desired image(s). The maximum length is 1000 characters.
        mask:
          type: string
          format: binary
          description: An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - dall-e-2
          nullable: true
          description: The model to use for image generation. Only `dall-e-2` is supported at this time.
          x-oaiTypeLabel: string
          default: dall-e-2
        n:
          type: integer
          format: int32
          nullable: true
          minimum: 1
          maximum: 10
          description: The number of images to generate. Must be between 1 and 10.
          default: 1
        size:
          type: string
          enum:
            - 256x256
            - 512x512
            - 1024x1024
          nullable: true
          description: The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
          default: 1024x1024
        response_format:
          type: string
          enum:
            - url
            - b64_json
          nullable: true
          description: The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
          default: url
        user:
          type: string
          description: A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
    CreateImageRequest:
      type: object
      required:
        - prompt
      properties:
        prompt:
          type: string
          description: A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - dall-e-2
                - dall-e-3
          nullable: true
          description: The model to use for image generation.
          x-oaiTypeLabel: string
          default: dall-e-2
        n:
          type: integer
          format: int32
          nullable: true
          minimum: 1
          maximum: 10
          description: The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
          default: 1
        quality:
          type: string
          enum:
            - standard
            - hd
          description: The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.
          default: standard
        response_format:
          type: string
          enum:
            - url
            - b64_json
          nullable: true
          description: The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
          default: url
        size:
          type: string
          enum:
            - 256x256
            - 512x512
            - 1024x1024
            - 1792x1024
            - 1024x1792
          nullable: true
          description: The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
          default: 1024x1024
        style:
          type: string
          enum:
            - vivid
            - natural
          nullable: true
          description: The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
          default: vivid
        user:
          type: string
          description: A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
    CreateImageVariationRequestMultiPart:
      type: object
      required:
        - image
      properties:
        image:
          type: string
          format: binary
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - dall-e-2
          nullable: true
          description: The model to use for image generation. Only `dall-e-2` is supported at this time.
          x-oaiTypeLabel: string
          default: dall-e-2
        n:
          type: integer
          format: int32
          nullable: true
          minimum: 1
          maximum: 10
          description: The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
          default: 1
        response_format:
          type: string
          enum:
            - url
            - b64_json
          nullable: true
          description: The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
          default: url
        size:
          type: string
          enum:
            - 256x256
            - 512x512
            - 1024x1024
          nullable: true
          description: The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
          default: 1024x1024
        user:
          type: string
          description: A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
    CreateMessageRequest:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum:
            - user
            - assistant
          description: |-
            The role of the entity that is creating the message. Allowed values include:
            - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.
            - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.
        content:
          type: array
          items:
            $ref: '#/components/schemas/MessageContent'
          x-oaiExpandable: true
        attachments:
          type: object
          allOf:
            - $ref: '#/components/schemas/CreateMessageRequestAttachmentsItem'
          nullable: true
          description: A list of files attached to the message, and the tools they should be added to.
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
    CreateMessageRequestAttachmentsItem:
      type: array
      items:
        type: object
        properties:
          file_id:
            type: string
            description: The ID of the file to attach to the message.
          tools:
            type: array
            items:
              anyOf:
                - $ref: '#/components/schemas/AssistantToolsCode'
                - $ref: '#/components/schemas/AssistantToolsFileSearchTypeOnly'
            description: The tools to add this file to.
            x-oaiExpandable: true
        required:
          - file_id
          - tools
    CreateModerationRequest:
      type: object
      required:
        - input
      properties:
        input:
          anyOf:
            - type: string
            - type: array
              items:
                type: string
          description: The input text to classify
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - text-moderation-latest
                - text-moderation-stable
          description: |-
            Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.

            The default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`.
          x-oaiTypeLabel: string
          default: text-moderation-latest
    CreateModerationResponse:
      type: object
      required:
        - id
        - model
        - results
      properties:
        id:
          type: string
          description: The unique identifier for the moderation request.
        model:
          type: string
          description: The model used to generate the moderation results.
        results:
          type: array
          items:
            type: object
            properties:
              flagged:
                type: boolean
                description: Whether any of the below categories are flagged.
              categories:
                type: object
                properties:
                  hate:
                    type: boolean
                    description: Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.
                  hate/threatening:
                    type: boolean
                    description: Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.
                  harassment:
                    type: boolean
                    description: Content that expresses, incites, or promotes harassing language towards any target.
                  harassment/threatening:
                    type: boolean
                    description: Harassment content that also includes violence or serious harm towards any target.
                  self-harm:
                    type: boolean
                    description: Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.
                  self-harm/intent:
                    type: boolean
                    description: Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.
                  self-harm/instructions:
                    type: boolean
                    description: Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.
                  sexual:
                    type: boolean
                    description: Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).
                  sexual/minors:
                    type: boolean
                    description: Sexual content that includes an individual who is under 18 years old.
                  violence:
                    type: boolean
                    description: Content that depicts death, violence, or physical injury.
                  violence/graphic:
                    type: boolean
                    description: Content that depicts death, violence, or physical injury in graphic detail.
                required:
                  - hate
                  - hate/threatening
                  - harassment
                  - harassment/threatening
                  - self-harm
                  - self-harm/intent
                  - self-harm/instructions
                  - sexual
                  - sexual/minors
                  - violence
                  - violence/graphic
                description: A list of the categories, and whether they are flagged or not.
              category_scores:
                type: object
                properties:
                  hate:
                    type: number
                    format: float
                    description: The score for the category 'hate'.
                  hate/threatening:
                    type: number
                    format: float
                    description: The score for the category 'hate/threatening'.
                  harassment:
                    type: number
                    format: float
                    description: The score for the category 'harassment'.
                  harassment/threatening:
                    type: number
                    format: float
                    description: The score for the category 'harassment/threatening'.
                  self-harm:
                    type: number
                    format: float
                    description: The score for the category 'self-harm'.
                  self-harm/intent:
                    type: number
                    format: float
                    description: The score for the category 'self-harm/intent'.
                  self-harm/instructions:
                    type: number
                    format: float
                    description: The score for the category 'self-harm/instructions'.
                  sexual:
                    type: number
                    format: float
                    description: The score for the category 'sexual'.
                  sexual/minors:
                    type: number
                    format: float
                    description: The score for the category 'sexual/minors'.
                  violence:
                    type: number
                    format: float
                    description: The score for the category 'violence'.
                  violence/graphic:
                    type: number
                    format: float
                    description: The score for the category 'violence/graphic'.
                required:
                  - hate
                  - hate/threatening
                  - harassment
                  - harassment/threatening
                  - self-harm
                  - self-harm/intent
                  - self-harm/instructions
                  - sexual
                  - sexual/minors
                  - violence
                  - violence/graphic
                description: A list of the categories along with their scores as predicted by model.
            required:
              - flagged
              - categories
              - category_scores
          description: A list of moderation objects.
      description: Represents if a given text input is potentially harmful.
    CreateRunRequest:
      type: object
      required:
        - assistant_id
      properties:
        assistant_id:
          type: string
          description: The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - gpt-4o
                - gpt-4o-2024-05-13
                - gpt-4-turbo
                - gpt-4-turbo-2024-04-09
                - gpt-4-0125-preview
                - gpt-4-turbo-preview
                - gpt-4-1106-preview
                - gpt-4-vision-preview
                - gpt-4
                - gpt-4-0314
                - gpt-4-0613
                - gpt-4-32k
                - gpt-4-32k-0314
                - gpt-4-32k-0613
                - gpt-3.5-turbo
                - gpt-3.5-turbo-16k
                - gpt-3.5-turbo-0613
                - gpt-3.5-turbo-1106
                - gpt-3.5-turbo-0125
                - gpt-3.5-turbo-16k-0613
          nullable: true
          description: The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
          x-oaiTypeLabel: string
        instructions:
          type: string
          nullable: true
          description: Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.
        additional_instructions:
          type: string
          nullable: true
          description: Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
        additional_messages:
          type: object
          allOf:
            - $ref: '#/components/schemas/CreateRunRequestAdditional_messages'
          nullable: true
          description: Adds additional messages to the thread before creating the run.
        tools:
          type: object
          allOf:
            - $ref: '#/components/schemas/CreateRunRequestTools'
          nullable: true
          description: Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
        temperature:
          type: number
          format: float
          nullable: true
          minimum: 0
          maximum: 2
          description: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
          default: 1
        top_p:
          type: number
          format: float
          nullable: true
          minimum: 0
          maximum: 1
          description: |-
            An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or temperature but not both.
          default: 1
        stream:
          type: boolean
          nullable: true
          description: 'If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.'
        max_prompt_tokens:
          type: integer
          format: int32
          nullable: true
          minimum: 256
          description: The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
        max_completion_tokens:
          type: integer
          format: int32
          nullable: true
          minimum: 256
          description: The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
        truncation_strategy:
          type: object
          allOf:
            - $ref: '#/components/schemas/TruncationObject'
          nullable: true
        tool_choice:
          oneOf:
            - $ref: '#/components/schemas/AssistantsApiToolChoiceOption'
          nullable: true
        parallel_tool_calls:
          type: boolean
          default: true
        response_format:
          oneOf:
            - $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
    CreateRunRequestAdditional_messages:
      type: array
      items:
        $ref: '#/components/schemas/CreateMessageRequest'
    CreateRunRequestTools:
      type: array
      items:
        $ref: '#/components/schemas/AssistantToolDefinition'
      maxItems: 20
      x-oaiExpandable: true
    CreateSpeechRequest:
      type: object
      required:
        - model
        - input
        - voice
      properties:
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - tts-1
                - tts-1-hd
          description: 'One of the available [TTS models](/docs/models/tts): `tts-1` or `tts-1-hd`'
          x-oaiTypeLabel: string
        input:
          type: string
          maxLength: 4096
          description: The text to generate audio for. The maximum length is 4096 characters.
        voice:
          type: string
          enum:
            - alloy
            - echo
            - fable
            - onyx
            - nova
            - shimmer
          description: The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).
        response_format:
          type: string
          enum:
            - mp3
            - opus
            - aac
            - flac
            - wav
            - pcm
          description: The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
          default: mp3
        speed:
          type: number
          format: float
          minimum: 0.25
          maximum: 4
          description: The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
          default: 1
    CreateThreadAndRunRequest:
      type: object
      required:
        - assistant_id
      properties:
        assistant_id:
          type: string
          description: The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
        thread:
          allOf:
            - $ref: '#/components/schemas/CreateThreadRequest'
          description: If no thread is provided, an empty thread will be created.
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - gpt-4o
                - gpt-4o-2024-05-13
                - gpt-4-turbo
                - gpt-4-turbo-2024-04-09
                - gpt-4-0125-preview
                - gpt-4-turbo-preview
                - gpt-4-1106-preview
                - gpt-4-vision-preview
                - gpt-4
                - gpt-4-0314
                - gpt-4-0613
                - gpt-4-32k
                - gpt-4-32k-0314
                - gpt-4-32k-0613
                - gpt-3.5-turbo
                - gpt-3.5-turbo-16k
                - gpt-3.5-turbo-0613
                - gpt-3.5-turbo-1106
                - gpt-3.5-turbo-0125
                - gpt-3.5-turbo-16k-0613
          nullable: true
          description: The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
          x-oaiTypeLabel: string
        instructions:
          type: string
          nullable: true
          description: Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
        tools:
          type: object
          allOf:
            - $ref: '#/components/schemas/CreateThreadAndRunRequestTools'
          nullable: true
          description: Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
        tool_resources:
          type: object
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  items:
                    type: string
                  maxItems: 20
                  description: A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                  default: []
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  items:
                    type: string
                  maxItems: 1
                  description: The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
          nullable: true
          description: A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
        temperature:
          type: number
          format: float
          nullable: true
          minimum: 0
          maximum: 2
          description: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
          default: 1
        top_p:
          type: number
          format: float
          nullable: true
          minimum: 0
          maximum: 1
          description: |-
            An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or temperature but not both.
          default: 1
        stream:
          type: boolean
          nullable: true
          description: 'If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.'
        max_prompt_tokens:
          type: integer
          format: int32
          nullable: true
          minimum: 256
          description: The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
        max_completion_tokens:
          type: integer
          format: int32
          nullable: true
          minimum: 256
          description: The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
        truncation_strategy:
          type: object
          allOf:
            - $ref: '#/components/schemas/TruncationObject'
          nullable: true
        tool_choice:
          oneOf:
            - $ref: '#/components/schemas/AssistantsApiToolChoiceOption'
          nullable: true
        parallel_tool_calls:
          type: boolean
          default: true
        response_format:
          oneOf:
            - $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
    CreateThreadAndRunRequestTools:
      type: array
      items:
        $ref: '#/components/schemas/AssistantToolDefinition'
      maxItems: 20
    CreateThreadRequest:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/CreateMessageRequest'
          description: A list of [messages](/docs/api-reference/messages) to start the thread with.
        tool_resources:
          type: object
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  items:
                    type: string
                  maxItems: 20
                  description: A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                  default: []
            file_search:
              anyOf:
                - $ref: '#/components/schemas/CreateThreadRequestToolResourcesFileSearchVectorStoreIdReferences'
                - $ref: '#/components/schemas/CreateThreadRequestToolResourcesFileSearchVectorStoreCreationHelpers'
          nullable: true
          description: A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
    CreateThreadRequestToolResourcesFileSearchBase:
      type: object
    CreateThreadRequestToolResourcesFileSearchVectorStoreCreationHelpers:
      type: object
      properties:
        vector_stores:
          type: array
          items:
            type: object
            properties:
              file_ids:
                type: array
                items:
                  type: string
                maxItems: 10000
                description: |-
                  A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be
                  a maximum of 10000 files in a vector store.
              metadata:
                type: object
                additionalProperties:
                  type: string
                description: |-
                  Set of 16 key-value pairs that can be attached to a vector store. This can be useful for
                  storing additional information about the vector store in a structured format. Keys can
                  be a maximum of 64 characters long and values can be a maxium of 512 characters long.
                x-oaiTypeLabel: map
          maxItems: 1
          description: |-
            A helper to create a [vector store](/docs/api-reference/vector-stores/object) with
            file_ids and attach it to this thread. There can be a maximum of 1 vector store attached
            to the thread.
    CreateThreadRequestToolResourcesFileSearchVectorStoreIdReferences:
      type: object
      properties:
        vector_store_ids:
          type: array
          items:
            type: string
          maxItems: 1
          description: |-
            The [vector store](/docs/api-reference/vector-stores/object) attached to this thread.
            There can be a maximum of 1 vector store attached to the thread.
    CreateTranscriptionRequestMultiPart:
      type: object
      required:
        - file
        - model
      properties:
        file:
          type: string
          format: binary
          description: 'The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.'
          x-oaiTypeLabel: file
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - whisper-1
          description: ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.
          x-oaiTypeLabel: string
        language:
          type: string
          description: The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.
        prompt:
          type: string
          description: An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.
        response_format:
          type: string
          enum:
            - json
            - text
            - srt
            - verbose_json
            - vtt
          description: 'The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.'
          default: json
        temperature:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
          default: 0
        timestamp_granularities:
          type: array
          items:
            type: string
            enum:
              - word
              - segment
          description: 'The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.'
          default:
            - segment
    CreateTranscriptionResponseJson:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          description: The transcribed text.
      description: Represents a transcription response returned by model, based on the provided input.
    CreateTranscriptionResponseVerboseJson:
      type: object
      required:
        - task
        - language
        - duration
        - text
      properties:
        task:
          type: string
          enum:
            - transcribe
          description: The task label.
        language:
          type: string
          description: The language of the input audio.
        duration:
          type: number
          format: float
          description: The duration of the input audio.
        text:
          type: string
          description: The transcribed text.
        words:
          type: array
          items:
            $ref: '#/components/schemas/TranscriptionWord'
          description: Extracted words and their corresponding timestamps.
        segments:
          type: array
          items:
            $ref: '#/components/schemas/TranscriptionSegment'
          description: Segments of the transcribed text and their corresponding details.
      description: Represents a verbose json transcription response returned by model, based on the provided input.
    CreateTranslationRequestMultiPart:
      type: object
      required:
        - file
        - model
      properties:
        file:
          type: string
          format: binary
          description: 'The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.'
          x-oaiTypeLabel: file
        model:
          anyOf:
            - type: string
            - type: string
              enum:
                - whisper-1
          description: ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.
          x-oaiTypeLabel: string
        prompt:
          type: string
          description: An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.
        response_format:
          type: string
          enum:
            - json
            - text
            - srt
            - verbose_json
            - vtt
          description: 'The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.'
          default: json
        temperature:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
          default: 0
    CreateTranslationResponseJson:
      type: object
      required:
        - text
      properties:
        text:
          type: string
    CreateTranslationResponseVerboseJson:
      type: object
      required:
        - task
        - language
        - duration
        - text
      properties:
        task:
          type: string
          enum:
            - translate
          description: The task label.
        language:
          type: string
          description: The language of the output translation (always `english`).
        duration:
          type: number
          format: float
          description: The duration of the input audio.
        text:
          type: string
          description: The translated text.
        segments:
          type: array
          items:
            $ref: '#/components/schemas/TranscriptionSegment'
          description: Segments of the translated text and their corresponding details.
    CreateVectorStoreFileBatchRequest:
      type: object
      required:
        - file_ids
      properties:
        file_ids:
          type: array
          items:
            type: string
          minItems: 1
          maxItems: 500
          description: A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.
        chunking_strategy:
          $ref: '#/components/schemas/ChunkingStrategyRequestParam'
    CreateVectorStoreFileRequest:
      type: object
      required:
        - file_id
      properties:
        file_id:
          type: string
          description: A [File](/docs/api-reference/files) ID that the vector store should use. Useful for tools like `file_search` that can access files.
        chunking_strategy:
          $ref: '#/components/schemas/ChunkingStrategyRequestParam'
    CreateVectorStoreRequest:
      type: object
      properties:
        file_ids:
          type: array
          items:
            type: string
          maxItems: 500
          description: A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.
        name:
          type: string
          description: The name of the vector store.
        expires_after:
          $ref: '#/components/schemas/VectorStoreExpirationAfter'
        chunking_strategy:
          anyOf:
            - $ref: '#/components/schemas/AutoChunkingStrategyRequestParam'
            - $ref: '#/components/schemas/StaticChunkingStrategyRequestParam'
          description: The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty.
          x-oaiExpandable: true
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
    DeleteAssistantResponse:
      type: object
      required:
        - id
        - deleted
        - object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
            - assistant.deleted
    DeleteFileResponse:
      type: object
      required:
        - id
        - object
        - deleted
      properties:
        id:
          type: string
        object:
          type: string
          enum:
            - file
        deleted:
          type: boolean
    DeleteMessageResponse:
      type: object
      required:
        - id
        - deleted
        - object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
            - thread.message.deleted
    DeleteModelResponse:
      type: object
      required:
        - id
        - deleted
        - object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
            - model
    DeleteThreadResponse:
      type: object
      required:
        - id
        - deleted
        - object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
            - thread.deleted
    DeleteVectorStoreFileResponse:
      type: object
      required:
        - id
        - deleted
        - object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
            - vector_store.file.deleted
    DeleteVectorStoreResponse:
      type: object
      required:
        - id
        - deleted
        - object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
            - vector_store.deleted
    Embedding:
      type: object
      required:
        - index
        - embedding
        - object
      properties:
        index:
          type: integer
          format: int32
          description: The index of the embedding in the list of embeddings.
        embedding:
          anyOf:
            - type: array
              items:
                type: number
            - type: string
          description: The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).
        object:
          type: string
          enum:
            - embedding
          description: The object type, which is always "embedding".
      description: Represents an embedding vector returned by embedding endpoint.
    Error:
      type: object
      required:
        - code
        - message
        - param
        - type
      properties:
        code:
          type: string
          nullable: true
        message:
          type: string
        param:
          type: string
          nullable: true
        type:
          type: string
    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          $ref: '#/components/schemas/Error'
    FileChunkingStrategyRequestParam:
      type: object
      required:
        - type
      properties:
        type:
          type: string
      discriminator:
        propertyName: type
        mapping:
          static: '#/components/schemas/StaticChunkingStrategyRequestParam'
    FileChunkingStrategyResponseParam:
      type: object
      required:
        - type
      properties:
        type:
          type: string
      discriminator:
        propertyName: type
        mapping:
          auto: '#/components/schemas/AutoChunkingStrategyResponseParam'
          other: '#/components/schemas/OtherChunkingStrategyResponseParam'
    FineTuneChatCompletionRequestAssistantMessage:
      type: object
      allOf:
        - $ref: '#/components/schemas/ChatCompletionRequestAssistantMessage'
    FineTuningIntegration:
      type: object
      required:
        - type
      properties:
        type:
          type: string
      discriminator:
        propertyName: type
        mapping:
          wandb: '#/components/schemas/FineTuningIntegrationWandb'
    FineTuningIntegrationWandb:
      type: object
      required:
        - type
        - wandb
      properties:
        type:
          type: string
          enum:
            - wandb
          description: The type of the integration being enabled for the fine-tuning job
        wandb:
          type: object
          properties:
            project:
              type: string
              description: The name of the project that the new run will be created under.
            name:
              type: string
              nullable: true
              description: A display name to set for the run. If not set, we will use the Job ID as the name.
            entity:
              type: string
              nullable: true
              description: |-
                The entity to use for the run. This allows you to set the team or username of the WandB user that you would
                like associated with the run. If not set, the default entity for the registered WandB API key is used.
            tags:
              type: array
              items:
                type: string
              description: |-
                A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some
                default tags are generated by OpenAI: "openai/finetune", "openai/{base-model}", "openai/{ftjob-abcdef}".
          required:
            - project
          description: |-
            The settings for your integration with Weights and Biases. This payload specifies the project that
            metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
            to your run, and set a default entity (team, username, etc) to be associated with your run.
      allOf:
        - $ref: '#/components/schemas/FineTuningIntegration'
    FineTuningJob:
      type: object
      required:
        - id
        - created_at
        - error
        - fine_tuned_model
        - finished_at
        - hyperparameters
        - model
        - object
        - organization_id
        - result_files
        - status
        - trained_tokens
        - training_file
        - validation_file
        - seed
      properties:
        user_provided_suffix:
          type: string
          nullable: true
          description: The descriptive suffix applied to the job, as specified in the job creation request.
        id:
          type: string
          description: The object identifier, which can be referenced in the API endpoints.
        created_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the fine-tuning job was created.
        error:
          type: object
          properties:
            code:
              type: string
              description: A machine-readable error code.
            message:
              type: string
              description: A human-readable error message.
            param:
              type: string
              nullable: true
              description: The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.
          required:
            - code
            - message
            - param
          nullable: true
          description: For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
        fine_tuned_model:
          type: string
          nullable: true
          description: The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
        finished_at:
          type: integer
          format: unixtime
          nullable: true
          description: The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
        hyperparameters:
          allOf:
            - $ref: '#/components/schemas/FineTuningJobHyperparameters'
          description: The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
        model:
          type: string
          description: The base model that is being fine-tuned.
        object:
          type: string
          enum:
            - fine_tuning.job
          description: The object type, which is always "fine_tuning.job".
        organization_id:
          type: string
          description: The organization that owns the fine-tuning job.
        result_files:
          type: array
          items:
            type: string
          description: The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
        status:
          type: string
          enum:
            - validating_files
            - queued
            - running
            - succeeded
            - failed
            - cancelled
          description: The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
        trained_tokens:
          type: integer
          format: int32
          nullable: true
          description: The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
        training_file:
          type: string
          description: The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
        validation_file:
          type: string
          nullable: true
          description: The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
        integrations:
          type: object
          allOf:
            - $ref: '#/components/schemas/FineTuningJobIntegrationsItem'
          nullable: true
          description: A list of integrations to enable for this fine-tuning job.
        seed:
          type: integer
          format: int32
          description: The seed used for the fine-tuning job.
        estimated_finish:
          type: integer
          format: unixtime
          nullable: true
          description: The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running.
      description: The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.
    FineTuningJobCheckpoint:
      type: object
      required:
        - id
        - created_at
        - fine_tuned_model_checkpoint
        - step_number
        - metrics
        - fine_tuning_job_id
        - object
      properties:
        id:
          type: string
          description: The checkpoint identifier, which can be referenced in the API endpoints.
        created_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the checkpoint was created.
        fine_tuned_model_checkpoint:
          type: string
          description: The name of the fine-tuned checkpoint model that is created.
        step_number:
          type: integer
          format: int32
          description: The step number that the checkpoint was created at.
        metrics:
          type: object
          properties:
            step:
              type: number
              format: float
            train_loss:
              type: number
              format: float
            train_mean_token_accuracy:
              type: number
              format: float
            valid_loss:
              type: number
              format: float
            valid_mean_token_accuracy:
              type: number
              format: float
            full_valid_loss:
              type: number
              format: float
            full_valid_mean_token_accuracy:
              type: number
              format: float
          description: Metrics at the step number during the fine-tuning job.
        fine_tuning_job_id:
          type: string
          description: The name of the fine-tuning job that this checkpoint was created from.
        object:
          type: string
          enum:
            - fine_tuning.job.checkpoint
          description: The object type, which is always "fine_tuning.job.checkpoint".
      description: The `fine_tuning.job.checkpoint` object represents a model checkpoint for a fine-tuning job that is ready to use.
    FineTuningJobEvent:
      type: object
      required:
        - id
        - created_at
        - level
        - message
        - object
      properties:
        id:
          type: string
        created_at:
          type: integer
          format: unixtime
        level:
          type: string
          enum:
            - info
            - warn
            - error
        message:
          type: string
        object:
          type: string
          enum:
            - fine_tuning.job.event
      description: Fine-tuning job event object
    FineTuningJobHyperparameters:
      type: object
      required:
        - n_epochs
        - batch_size
        - learning_rate_multiplier
      properties:
        n_epochs:
          anyOf:
            - $ref: '#/components/schemas/FineTuningJobHyperparametersNEpochsChoiceEnum'
            - type: integer
              format: int32
          description: |-
            The number of epochs to train the model for. An epoch refers to one full cycle
            through the training dataset.
          default: auto
        batch_size:
          anyOf:
            - $ref: '#/components/schemas/FineTuningJobHyperparametersBatchSizeChoiceEnum'
            - type: integer
              format: int32
          description: |-
            Number of examples in each batch. A larger batch size means that model parameters
            are updated less frequently, but with lower variance.
          default: auto
        learning_rate_multiplier:
          anyOf:
            - $ref: '#/components/schemas/FineTuningJobHyperparametersLearningRateMultiplierChoiceEnum'
            - type: number
              format: float
          description: |-
            Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
            overfitting.
          default: auto
    FineTuningJobHyperparametersBatchSizeChoiceEnum:
      type: string
      enum:
        - auto
    FineTuningJobHyperparametersLearningRateMultiplierChoiceEnum:
      type: string
      enum:
        - auto
    FineTuningJobHyperparametersNEpochsChoiceEnum:
      type: string
      enum:
        - auto
    FineTuningJobIntegrationsItem:
      type: array
      items:
        $ref: '#/components/schemas/FineTuningIntegration'
      maxItems: 5
      x-oaiExpandable: true
    FinetuneChatRequestInput:
      type: object
      properties:
        messages:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/ChatCompletionRequestSystemMessage'
              - $ref: '#/components/schemas/ChatCompletionRequestUserMessage'
              - $ref: '#/components/schemas/FineTuneChatCompletionRequestAssistantMessage'
              - $ref: '#/components/schemas/ChatCompletionRequestToolMessage'
              - $ref: '#/components/schemas/ChatCompletionRequestFunctionMessage'
          minItems: 1
          x-oaiExpandable: true
        tools:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionTool'
          description: A list of tools the model may generate JSON inputs for.
        parallel_tool_calls:
          type: boolean
          default: true
        functions:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionFunctions'
          minItems: 1
          maxItems: 128
          description: A list of functions the model may generate JSON inputs for.
          deprecated: true
      description: The per-line training example of a fine-tuning input file for chat models
    FinetuneCompletionRequestInput:
      type: object
      properties:
        prompt:
          type: string
          description: The input prompt for this training example.
        completion:
          type: string
          description: The desired completion for this training example.
      description: The per-line training example of a fine-tuning input file for completions models
    FunctionObject:
      type: object
      required:
        - name
      properties:
        description:
          type: string
          description: A description of what the function does, used by the model to choose when and how to call the function.
        name:
          type: string
          description: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
        parameters:
          $ref: '#/components/schemas/FunctionParameters'
    FunctionParameters:
      type: object
      additionalProperties: {}
      description: |-
        The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. 

        Omitting `parameters` defines a function with an empty parameter list.
    Image:
      type: object
      properties:
        b64_json:
          type: string
          format: base64
          description: The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
        url:
          type: string
          format: uri
          description: The URL of the generated image, if `response_format` is `url` (default).
        revised_prompt:
          type: string
          description: The prompt that was used to generate the image, if there was any revision to the prompt.
      description: Represents the url or the content of an image generated by the OpenAI API.
    ImagesResponse:
      type: object
      required:
        - created
        - data
      properties:
        created:
          type: integer
          format: unixtime
        data:
          type: array
          items:
            $ref: '#/components/schemas/Image'
    ListAssistantsResponse:
      type: object
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/AssistantObject'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
    ListBatchesResponse:
      type: object
      required:
        - data
        - has_more
        - object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Batch'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
        object:
          type: string
          enum:
            - list
    ListFilesResponse:
      type: object
      required:
        - data
        - object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/OpenAIFile'
        object:
          type: string
          enum:
            - list
    ListFineTuningJobCheckpointsResponse:
      type: object
      required:
        - data
        - object
        - has_more
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/FineTuningJobCheckpoint'
        object:
          type: string
          enum:
            - list
        first_id:
          type: string
          nullable: true
        last_id:
          type: string
          nullable: true
        has_more:
          type: boolean
    ListFineTuningJobEventsResponse:
      type: object
      required:
        - data
        - object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/FineTuningJobEvent'
        object:
          type: string
          enum:
            - list
    ListMessagesResponse:
      type: object
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/MessageObject'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
    ListModelsResponse:
      type: object
      required:
        - object
        - data
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/Model'
    ListOrder:
      anyOf:
        - type: string
        - type: string
          enum:
            - asc
            - desc
    ListPaginatedFineTuningJobsResponse:
      type: object
      required:
        - data
        - has_more
        - object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/FineTuningJob'
        has_more:
          type: boolean
        object:
          type: string
          enum:
            - list
    ListRunStepsResponse:
      type: object
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/RunStepObject'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
    ListRunsResponse:
      type: object
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/RunObject'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
    ListThreadsResponse:
      type: object
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/ThreadObject'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
    ListVectorStoreFilesFilter:
      anyOf:
        - type: string
        - type: string
          enum:
            - in_progress
            - completed
            - failed
            - cancelled
    ListVectorStoreFilesResponse:
      type: object
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/VectorStoreFileObject'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
    ListVectorStoresResponse:
      type: object
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      properties:
        object:
          type: string
          enum:
            - list
        data:
          type: array
          items:
            $ref: '#/components/schemas/VectorStoreObject'
        first_id:
          type: string
        last_id:
          type: string
        has_more:
          type: boolean
    MessageContent:
      type: object
      description: Represents a single piece of content in an Assistants API message.
    MessageContentImageFileObject:
      type: object
      required:
        - type
        - image_file
      properties:
        type:
          type: string
          enum:
            - image_file
          description: Always `image_file`.
        image_file:
          type: object
          properties:
            file_id:
              type: string
              description: The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content.
            detail:
              type: string
              enum:
                - auto
                - low
                - high
              description: Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
              default: auto
          required:
            - file_id
      allOf:
        - $ref: '#/components/schemas/MessageContent'
      description: References an image [File](/docs/api-reference/files) in the content of a message.
    MessageContentImageUrlObject:
      type: object
      required:
        - type
        - image_url
      properties:
        type:
          type: string
          enum:
            - image_url
          description: The type of the content part.
        image_url:
          type: object
          properties:
            url:
              type: string
              format: uri
              description: 'The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.'
            detail:
              type: string
              enum:
                - auto
                - low
                - high
              description: Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`
              default: auto
          required:
            - url
      allOf:
        - $ref: '#/components/schemas/MessageContent'
      description: References an image URL in the content of a message.
    MessageContentTextAnnotationsFileCitationObject:
      type: object
      required:
        - type
        - text
        - file_citation
        - start_index
        - end_index
      properties:
        type:
          type: string
          enum:
            - file_citation
          description: Always `file_citation`.
        text:
          type: string
          description: The text in the message content that needs to be replaced.
        file_citation:
          type: object
          properties:
            file_id:
              type: string
              description: The ID of the specific File the citation is from.
          required:
            - file_id
        start_index:
          type: integer
          format: int32
          minimum: 0
        end_index:
          type: integer
          format: int32
          minimum: 0
      allOf:
        - $ref: '#/components/schemas/MessageContentTextObjectAnnotation'
      description: A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "file_search" tool to search files.
    MessageContentTextAnnotationsFilePathObject:
      type: object
      required:
        - type
        - text
        - file_path
        - start_index
        - end_index
      properties:
        type:
          type: string
          enum:
            - file_path
          description: Always `file_path`.
        text:
          type: string
          description: The text in the message content that needs to be replaced.
        file_path:
          type: object
          properties:
            file_id:
              type: string
              description: The ID of the file that was generated.
          required:
            - file_id
        start_index:
          type: integer
          format: int32
          minimum: 0
        end_index:
          type: integer
          format: int32
          minimum: 0
      allOf:
        - $ref: '#/components/schemas/MessageContentTextObjectAnnotation'
      description: A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
    MessageContentTextObject:
      type: object
      required:
        - type
        - text
      properties:
        type:
          type: string
          enum:
            - text
          description: Always `text`.
        text:
          type: object
          properties:
            value:
              type: string
              description: The data that makes up the text.
            annotations:
              type: array
              items:
                $ref: '#/components/schemas/MessageContentTextObjectAnnotation'
              x-oaiExpandable: true
          required:
            - value
            - annotations
      allOf:
        - $ref: '#/components/schemas/MessageContent'
      description: The text content that is part of a message.
    MessageContentTextObjectAnnotation:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: The discriminated type identifier for the content item.
      discriminator:
        propertyName: type
        mapping:
          file_citation: '#/components/schemas/MessageContentTextAnnotationsFileCitationObject'
          file_path: '#/components/schemas/MessageContentTextAnnotationsFilePathObject'
    MessageDeltaContent:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: The discriminated type identifier for the content item.
      discriminator:
        propertyName: type
        mapping:
          image_file: '#/components/schemas/MessageDeltaContentImageFileObject'
          image_url: '#/components/schemas/MessageDeltaContentImageUrlObject'
          text: '#/components/schemas/MessageDeltaContentTextObject'
      description: Represents a single piece of incremental content in an Assistants API streaming response.
    MessageDeltaContentImageFileObject:
      type: object
      required:
        - index
        - type
      properties:
        index:
          type: integer
          format: int32
          description: The index of the content part in the message.
        type:
          type: string
          enum:
            - image_file
          description: Always `image_file`.
        image_file:
          type: object
          properties:
            file_id:
              type: string
              description: The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content.
            detail:
              type: string
              enum:
                - auto
                - low
                - high
              description: Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
              default: auto
      allOf:
        - $ref: '#/components/schemas/MessageDeltaContent'
      description: References an image [File](/docs/api-reference/files) in the content of a message.
    MessageDeltaContentImageUrlObject:
      type: object
      required:
        - index
        - type
      properties:
        index:
          type: integer
          format: int32
          description: The index of the content part in the message.
        type:
          type: string
          enum:
            - image_url
          description: Always `image_url`.
        image_url:
          type: object
          properties:
            url:
              type: string
              format: uri
              description: 'The URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.'
            detail:
              type: string
              enum:
                - auto
                - low
                - high
              description: Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`.
              default: auto
      allOf:
        - $ref: '#/components/schemas/MessageDeltaContent'
      description: References an image URL in the content of a message.
    MessageDeltaContentTextAnnotationsFileCitationObject:
      type: object
      required:
        - index
        - type
      properties:
        index:
          type: integer
          format: int32
          description: The index of the annotation in the text content part.
        type:
          type: string
          enum:
            - file_citation
          description: Always `file_citation`.
        text:
          type: string
          description: The text in the message content that needs to be replaced.
        file_citation:
          type: object
          properties:
            file_id:
              type: string
              description: The ID of the specific File the citation is from.
            quote:
              type: string
              description: The specific quote in the file.
        start_index:
          type: integer
          format: int32
          minimum: 0
        end_index:
          type: integer
          format: int32
          minimum: 0
      allOf:
        - $ref: '#/components/schemas/MessageDeltaTextContentAnnotation'
      description: A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "file_search" tool to search files.
    MessageDeltaContentTextAnnotationsFilePathObject:
      type: object
      required:
        - index
        - type
      properties:
        index:
          type: integer
          format: int32
          description: The index of the annotation in the text content part.
        type:
          type: string
          enum:
            - file_path
          description: Always `file_path`.
        text:
          type: string
          description: The text in the message content that needs to be replaced.
        file_path:
          type: object
          properties:
            file_id:
              type: string
              description: The ID of the file that was generated.
        start_index:
          type: integer
          format: int32
          minimum: 0
        end_index:
          type: integer
          format: int32
          minimum: 0
      allOf:
        - $ref: '#/components/schemas/MessageDeltaTextContentAnnotation'
      description: A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
    MessageDeltaContentTextObject:
      type: object
      required:
        - index
        - type
      properties:
        index:
          type: integer
          format: int32
          description: The index of the content part in the message.
        type:
          type: string
          enum:
            - text
          description: Always `text`.
        text:
          type: object
          properties:
            value:
              type: string
              description: The data that makes up the text.
            annotations:
              type: array
              items:
                $ref: '#/components/schemas/MessageDeltaTextContentAnnotation'
              x-oaiExpandable: true
      allOf:
        - $ref: '#/components/schemas/MessageDeltaContent'
      description: The text content that is part of a message.
    MessageDeltaObject:
      type: object
      required:
        - id
        - object
        - delta
      properties:
        id:
          type: string
          description: The identifier of the message, which can be referenced in API endpoints.
        object:
          type: string
          enum:
            - thread.message.delta
          description: The object type, which is always `thread.message.delta`.
        delta:
          type: object
          properties:
            role:
              type: string
              enum:
                - user
                - assistant
              description: The entity that produced the message. One of `user` or `assistant`.
            content:
              type: array
              items:
                $ref: '#/components/schemas/MessageDeltaContent'
              description: The content of the message in array of text and/or images.
              x-oaiExpandable: true
          description: The delta containing the fields that have changed on the Message.
      description: Represents a message delta i.e. any changed fields on a message during streaming.
    MessageDeltaTextContentAnnotation:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: The discriminated type identifier for the content item.
      discriminator:
        propertyName: type
        mapping:
          file_citation: '#/components/schemas/MessageDeltaContentTextAnnotationsFileCitationObject'
          file_path: '#/components/schemas/MessageDeltaContentTextAnnotationsFilePathObject'
    MessageObject:
      type: object
      required:
        - id
        - object
        - created_at
        - thread_id
        - status
        - incomplete_details
        - completed_at
        - incomplete_at
        - role
        - content
        - assistant_id
        - run_id
        - attachments
        - metadata
      properties:
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints.
        object:
          type: string
          enum:
            - thread.message
          description: The object type, which is always `thread.message`.
        created_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the message was created.
        thread_id:
          type: string
          description: The [thread](/docs/api-reference/threads) ID that this message belongs to.
        status:
          type: string
          enum:
            - in_progress
            - incomplete
            - completed
          description: The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
        incomplete_details:
          type: object
          properties:
            reason:
              type: string
              enum:
                - content_filter
                - max_tokens
                - run_cancelled
                - run_expired
                - run_failed
              description: The reason the message is incomplete.
          required:
            - reason
          nullable: true
          description: On an incomplete message, details about why the message is incomplete.
        completed_at:
          type: integer
          format: unixtime
          nullable: true
          description: The Unix timestamp (in seconds) for when the message was completed.
        incomplete_at:
          type: integer
          format: unixtime
          nullable: true
          description: The Unix timestamp (in seconds) for when the message was marked as incomplete.
        role:
          type: string
          enum:
            - user
            - assistant
          description: The entity that produced the message. One of `user` or `assistant`.
        content:
          type: array
          items:
            $ref: '#/components/schemas/MessageContent'
          description: The content of the message in array of text and/or images.
          x-oaiExpandable: true
        assistant_id:
          type: string
          nullable: true
          description: If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
        run_id:
          type: string
          nullable: true
          description: The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.
        attachments:
          type: object
          allOf:
            - $ref: '#/components/schemas/MessageObjectAttachmentsItem'
          nullable: true
          description: A list of files attached to the message, and the tools they were added to.
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
      description: Represents a message within a [thread](/docs/api-reference/threads).
    MessageObjectAttachmentsItem:
      type: array
      items:
        type: object
        properties:
          file_id:
            type: string
            description: The ID of the file to attach to the message.
          tools:
            type: array
            items:
              anyOf:
                - $ref: '#/components/schemas/AssistantToolsCode'
                - $ref: '#/components/schemas/AssistantToolsFileSearchTypeOnly'
            description: The tools to add this file to.
            x-oaiExpandable: true
    MessageRequestContentTextObject:
      type: object
      required:
        - type
        - text
      properties:
        type:
          type: string
          enum:
            - text
          description: Always `text`.
        text:
          type: string
          description: Text content to be sent to the model
      allOf:
        - $ref: '#/components/schemas/MessageContent'
      description: The text content that is part of a message.
    Model:
      type: object
      required:
        - id
        - created
        - object
        - owned_by
      properties:
        id:
          type: string
          description: The model identifier, which can be referenced in the API endpoints.
        created:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) when the model was created.
        object:
          type: string
          enum:
            - model
          description: The object type, which is always "model".
        owned_by:
          type: string
          description: The organization that owns the model.
      description: Describes an OpenAI model offering that can be used with the API.
    ModifyAssistantRequest:
      type: object
      properties:
        model:
          type: string
          description: ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
        name:
          type: string
          nullable: true
          maxLength: 256
          description: The name of the assistant. The maximum length is 256 characters.
        description:
          type: string
          nullable: true
          maxLength: 512
          description: The description of the assistant. The maximum length is 512 characters.
        instructions:
          type: string
          nullable: true
          maxLength: 256000
          description: The system instructions that the assistant uses. The maximum length is 256,000 characters.
        tools:
          type: array
          items:
            $ref: '#/components/schemas/AssistantToolDefinition'
          maxItems: 128
          description: A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
          x-oaiExpandable: true
          default: []
        tool_resources:
          type: object
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  items:
                    type: string
                  maxItems: 20
                  description: Overrides the list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                  default: []
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  items:
                    type: string
                  maxItems: 1
                  description: Overrides the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
          nullable: true
          description: A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
        temperature:
          type: number
          format: float
          nullable: true
          minimum: 0
          maximum: 2
          description: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
          default: 1
        top_p:
          type: number
          format: float
          nullable: true
          minimum: 0
          maximum: 1
          description: |-
            An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or temperature but not both.
          default: 1
        response_format:
          oneOf:
            - $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
    ModifyMessageRequest:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
    ModifyRunRequest:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
    ModifyThreadRequest:
      type: object
      properties:
        tool_resources:
          type: object
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  items:
                    type: string
                  maxItems: 20
                  description: A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                  default: []
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  items:
                    type: string
                  maxItems: 1
                  description: The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
          nullable: true
          description: A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
    OpenAIFile:
      type: object
      required:
        - id
        - bytes
        - created_at
        - filename
        - object
        - purpose
        - status
      properties:
        id:
          type: string
          description: The file identifier, which can be referenced in the API endpoints.
        bytes:
          type: integer
          format: int32
          nullable: true
          description: The size of the file, in bytes.
        created_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the file was created.
        filename:
          type: string
          description: The name of the file.
        object:
          type: string
          enum:
            - file
          description: The object type, which is always `file`.
        purpose:
          type: string
          enum:
            - assistants
            - assistants_output
            - batch
            - batch_output
            - fine-tune
            - fine-tune-results
            - vision
          description: The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.
        status:
          type: string
          enum:
            - uploaded
            - processed
            - error
          description: Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
          deprecated: true
        status_details:
          type: string
          description: Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.
          deprecated: true
      description: The `File` object represents a document that has been uploaded to OpenAI.
    OtherChunkingStrategyResponseParam:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - other
          description: Always `other`.
      allOf:
        - $ref: '#/components/schemas/FileChunkingStrategyResponseParam'
      description: This is returned when the chunking strategy is unknown. Typically, this is because the file was indexed before the `chunking_strategy` concept was introduced in the API.
    RunCompletionUsage:
      type: object
      required:
        - completion_tokens
        - prompt_tokens
        - total_tokens
      properties:
        completion_tokens:
          type: integer
          format: int32
          description: Number of completion tokens used over the course of the run.
        prompt_tokens:
          type: integer
          format: int32
          description: Number of prompt tokens used over the course of the run.
        total_tokens:
          type: integer
          format: int32
          description: Total number of tokens used (prompt + completion).
      description: Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).
    RunObject:
      type: object
      required:
        - id
        - object
        - created_at
        - thread_id
        - assistant_id
        - status
        - required_action
        - last_error
        - expires_at
        - started_at
        - cancelled_at
        - failed_at
        - completed_at
        - incomplete_details
        - model
        - instructions
        - tools
        - metadata
        - usage
        - max_prompt_tokens
        - max_completion_tokens
        - truncation_strategy
        - tool_choice
        - parallel_tool_calls
        - response_format
      properties:
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints.
        object:
          type: string
          enum:
            - thread.run
          description: The object type, which is always `thread.run`.
        created_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the run was created.
        thread_id:
          type: string
          description: The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
        assistant_id:
          type: string
          description: The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
        status:
          type: string
          enum:
            - queued
            - in_progress
            - requires_action
            - cancelling
            - cancelled
            - failed
            - completed
            - incomplete
            - expired
          description: The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.
        required_action:
          type: object
          properties:
            type:
              type: string
              enum:
                - submit_tool_outputs
              description: For now, this is always `submit_tool_outputs`.
            submit_tool_outputs:
              type: object
              properties:
                tool_calls:
                  type: array
                  items:
                    $ref: '#/components/schemas/RunToolCallObject'
                  description: A list of the relevant tool calls.
              required:
                - tool_calls
              description: Details on the tool outputs needed for this run to continue.
          required:
            - type
            - submit_tool_outputs
          nullable: true
          description: Details on the action required to continue the run. Will be `null` if no action is required.
        last_error:
          type: object
          properties:
            code:
              type: string
              enum:
                - server_error
                - rate_limit_exceeded
                - invalid_prompt
              description: One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
            message:
              type: string
              description: A human-readable description of the error.
          required:
            - code
            - message
          nullable: true
          description: The last error associated with this run. Will be `null` if there are no errors.
        expires_at:
          type: integer
          format: unixtime
          nullable: true
          description: The Unix timestamp (in seconds) for when the run will expire.
        started_at:
          type: integer
          format: unixtime
          nullable: true
          description: The Unix timestamp (in seconds) for when the run was started.
        cancelled_at:
          type: integer
          format: unixtime
          nullable: true
          description: The Unix timestamp (in seconds) for when the run was cancelled.
        failed_at:
          type: integer
          format: unixtime
          nullable: true
          description: The Unix timestamp (in seconds) for when the run failed.
        completed_at:
          type: integer
          format: unixtime
          nullable: true
          description: The Unix timestamp (in seconds) for when the run was completed.
        incomplete_details:
          type: object
          properties:
            reason:
              type: string
              enum:
                - max_completion_tokens
                - max_prompt_tokens
              description: The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
          nullable: true
          description: Details on why the run is incomplete. Will be `null` if the run is not incomplete.
        model:
          type: string
          description: The model that the [assistant](/docs/api-reference/assistants) used for this run.
        instructions:
          type: string
          description: The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
        tools:
          type: array
          items:
            $ref: '#/components/schemas/AssistantToolDefinition'
          maxItems: 20
          description: The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
          x-oaiExpandable: true
          default: []
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
        usage:
          type: object
          allOf:
            - $ref: '#/components/schemas/RunCompletionUsage'
          nullable: true
        temperature:
          type: number
          format: float
          nullable: true
          description: The sampling temperature used for this run. If not set, defaults to 1.
        top_p:
          type: number
          format: float
          nullable: true
          description: The nucleus sampling value used for this run. If not set, defaults to 1.
        max_prompt_tokens:
          type: integer
          format: int32
          nullable: true
          minimum: 256
          description: The maximum number of prompt tokens specified to have been used over the course of the run.
        max_completion_tokens:
          type: integer
          format: int32
          nullable: true
          minimum: 256
          description: The maximum number of completion tokens specified to have been used over the course of the run.
        truncation_strategy:
          type: object
          allOf:
            - $ref: '#/components/schemas/TruncationObject'
          nullable: true
        tool_choice:
          oneOf:
            - $ref: '#/components/schemas/AssistantsApiToolChoiceOption'
          nullable: true
        parallel_tool_calls:
          type: boolean
          default: true
        response_format:
          oneOf:
            - $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
      description: Represents an execution run on a [thread](/docs/api-reference/threads).
    RunStepCompletionUsage:
      type: object
      required:
        - completion_tokens
        - prompt_tokens
        - total_tokens
      properties:
        completion_tokens:
          type: integer
          format: int32
          description: Number of completion tokens used over the course of the run step.
        prompt_tokens:
          type: integer
          format: int32
          description: Number of prompt tokens used over the course of the run step.
        total_tokens:
          type: integer
          format: int32
          description: Total number of tokens used (prompt + completion).
      description: Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.
    RunStepDeltaObject:
      type: object
      required:
        - id
        - object
        - delta
      properties:
        id:
          type: string
          description: The identifier of the run step, which can be referenced in API endpoints.
        object:
          type: string
          enum:
            - thread.run.step.delta
          description: The object type, which is always `thread.run.step.delta`.
        delta:
          type: object
          properties:
            step_details:
              allOf:
                - $ref: '#/components/schemas/RunStepDeltaStepDetails'
              description: The details of the run step.
              x-oaiExpandable: true
          description: The delta containing the fields that have changed on the run step.
      description: Represents a run step delta i.e. any changed fields on a run step during streaming.
    RunStepDeltaStepDetails:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: The discriminated type identifier for the details object.
      discriminator:
        propertyName: type
        mapping:
          message_creation: '#/components/schemas/RunStepDeltaStepDetailsMessageCreationObject'
          tool_calls: '#/components/schemas/RunStepDeltaStepDetailsToolCallsObject'
    RunStepDeltaStepDetailsMessageCreationObject:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - message_creation
          description: Always `message_creation`.
        message_creation:
          type: object
          properties:
            message_id:
              type: string
              description: The ID of the message that was created by this run step.
      allOf:
        - $ref: '#/components/schemas/RunStepDeltaStepDetails'
      description: Details of the message creation by the run step.
    RunStepDeltaStepDetailsToolCallsCodeObject:
      type: object
      required:
        - index
        - type
      properties:
        index:
          type: integer
          format: int32
          description: The index of the tool call in the tool calls array.
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          enum:
            - code_interpreter
          description: The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
        code_interpreter:
          type: object
          properties:
            input:
              type: string
              description: The input to the Code Interpreter tool call.
            outputs:
              type: array
              items:
                $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsObject'
              description: The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
              x-oaiExpandable: true
          description: The Code Interpreter tool call definition.
      allOf:
        - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsObjectToolCallsObject'
      description: Details of the Code Interpreter tool call the run step was involved in.
    RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsObject:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: The discriminated type identifier for the details object.
      discriminator:
        propertyName: type
        mapping:
          logs: '#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject'
          image: '#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputImageObject'
      description: Abstractly represents a run step tool call details code interpreter output.
    RunStepDeltaStepDetailsToolCallsCodeOutputImageObject:
      type: object
      required:
        - index
        - type
      properties:
        index:
          type: integer
          format: int32
          description: The index of the output in the outputs array.
        type:
          type: string
          enum:
            - image
          description: Always `image`.
        image:
          type: object
          properties:
            file_id:
              type: string
              description: The [file](/docs/api-reference/files) ID of the image.
      allOf:
        - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsObject'
    RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject:
      type: object
      required:
        - index
        - type
      properties:
        index:
          type: integer
          format: int32
          description: The index of the output in the outputs array.
        type:
          type: string
          enum:
            - logs
          description: Always `logs`.
        logs:
          type: string
          description: The text output from the Code Interpreter tool call.
      allOf:
        - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObjectCodeInterpreterOutputsObject'
      description: Text output from the Code Interpreter tool call as part of a run step.
    RunStepDeltaStepDetailsToolCallsFileSearchObject:
      type: object
      required:
        - index
        - type
        - file_search
      properties:
        index:
          type: integer
          format: int32
          description: The index of the tool call in the tool calls array.
        id:
          type: string
          description: The ID of the tool call object.
        type:
          type: string
          enum:
            - file_search
          description: The type of tool call. This is always going to be `file_search` for this type of tool call.
        file_search:
          type: object
          additionalProperties:
            type: string
          description: For now, this is always going to be an empty object.
          x-oaiTypeLabel: map
      allOf:
        - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsObjectToolCallsObject'
    RunStepDeltaStepDetailsToolCallsFunctionObject:
      type: object
      required:
        - index
        - type
      properties:
        index:
          type: integer
          format: int32
          description: The index of the tool call in the tool calls array.
        id:
          type: string
          description: The ID of the tool call object.
        type:
          type: string
          enum:
            - function
          description: The type of tool call. This is always going to be `function` for this type of tool call.
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function.
            arguments:
              type: string
              description: The arguments passed to the function.
            output:
              type: string
              nullable: true
              description: The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
          description: The definition of the function that was called.
      allOf:
        - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsObjectToolCallsObject'
    RunStepDeltaStepDetailsToolCallsObject:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - tool_calls
          description: Always `tool_calls`.
        tool_calls:
          type: array
          items:
            $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsObjectToolCallsObject'
          description: 'An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.'
          x-oaiExpandable: true
      allOf:
        - $ref: '#/components/schemas/RunStepDeltaStepDetails'
      description: Details of the tool call.
    RunStepDeltaStepDetailsToolCallsObjectToolCallsObject:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: The discriminated type identifier for the details object.
      discriminator:
        propertyName: type
        mapping:
          code_interpreter: '#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObject'
          file_search: '#/components/schemas/RunStepDeltaStepDetailsToolCallsFileSearchObject'
          function: '#/components/schemas/RunStepDeltaStepDetailsToolCallsFunctionObject'
      description: Abstractly represents a run step tool call details inner object.
    RunStepDetailsMessageCreationObject:
      type: object
      required:
        - type
        - message_creation
      properties:
        type:
          type: string
          enum:
            - message_creation
          description: Always `message_creation`.
        message_creation:
          type: object
          properties:
            message_id:
              type: string
              description: The ID of the message that was created by this run step.
          required:
            - message_id
      allOf:
        - $ref: '#/components/schemas/RunStepObjectStepDetails'
      description: Details of the message creation by the run step.
    RunStepDetailsToolCallsCodeObject:
      type: object
      required:
        - id
        - type
        - code_interpreter
      properties:
        id:
          type: string
          description: The ID of the tool call.
        type:
          type: string
          enum:
            - code_interpreter
          description: The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
        code_interpreter:
          type: object
          properties:
            input:
              type: string
              description: The input to the Code Interpreter tool call.
            outputs:
              type: array
              items:
                $ref: '#/components/schemas/RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsObject'
              description: The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
              x-oaiExpandable: true
          required:
            - input
            - outputs
          description: The Code Interpreter tool call definition.
      allOf:
        - $ref: '#/components/schemas/RunStepDetailsToolCallsObjectToolCallsObject'
      description: Details of the Code Interpreter tool call the run step was involved in.
    RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsObject:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: The discriminated type identifier for the details object.
      discriminator:
        propertyName: type
        mapping:
          logs: '#/components/schemas/RunStepDetailsToolCallsCodeOutputLogsObject'
          image: '#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject'
      description: Abstractly represents a run step tool call details code interpreter output.
    RunStepDetailsToolCallsCodeOutputImageObject:
      type: object
      required:
        - type
        - image
      properties:
        type:
          type: string
          enum:
            - image
          description: Always `image`.
        image:
          type: object
          properties:
            file_id:
              type: string
              description: The [file](/docs/api-reference/files) ID of the image.
          required:
            - file_id
      allOf:
        - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsObject'
    RunStepDetailsToolCallsCodeOutputLogsObject:
      type: object
      required:
        - type
        - logs
      properties:
        type:
          type: string
          enum:
            - logs
          description: Always `logs`.
        logs:
          type: string
          description: The text output from the Code Interpreter tool call.
      allOf:
        - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsObject'
      description: Text output from the Code Interpreter tool call as part of a run step.
    RunStepDetailsToolCallsFileSearchObject:
      type: object
      required:
        - id
        - type
        - file_search
      properties:
        id:
          type: string
          description: The ID of the tool call object.
        type:
          type: string
          enum:
            - file_search
          description: The type of tool call. This is always going to be `file_search` for this type of tool call.
        file_search:
          type: object
          additionalProperties:
            type: string
          description: For now, this is always going to be an empty object.
          x-oaiTypeLabel: map
      allOf:
        - $ref: '#/components/schemas/RunStepDetailsToolCallsObjectToolCallsObject'
    RunStepDetailsToolCallsFunctionObject:
      type: object
      required:
        - id
        - type
        - function
      properties:
        id:
          type: string
          description: The ID of the tool call object.
        type:
          type: string
          enum:
            - function
          description: The type of tool call. This is always going to be `function` for this type of tool call.
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function.
            arguments:
              type: string
              description: The arguments passed to the function.
            output:
              type: string
              nullable: true
              description: The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
          required:
            - name
            - arguments
            - output
          description: The definition of the function that was called.
      allOf:
        - $ref: '#/components/schemas/RunStepDetailsToolCallsObjectToolCallsObject'
    RunStepDetailsToolCallsObject:
      type: object
      required:
        - type
        - tool_calls
      properties:
        type:
          type: string
          enum:
            - tool_calls
          description: Always `tool_calls`.
        tool_calls:
          type: array
          items:
            $ref: '#/components/schemas/RunStepDetailsToolCallsObjectToolCallsObject'
          description: 'An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.'
          x-oaiExpandable: true
      allOf:
        - $ref: '#/components/schemas/RunStepObjectStepDetails'
      description: Details of the tool call.
    RunStepDetailsToolCallsObjectToolCallsObject:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: The discriminated type identifier for the details object.
      discriminator:
        propertyName: type
        mapping:
          code_interpreter: '#/components/schemas/RunStepDetailsToolCallsCodeObject'
          file_search: '#/components/schemas/RunStepDetailsToolCallsFileSearchObject'
          function: '#/components/schemas/RunStepDetailsToolCallsFunctionObject'
      description: Abstractly represents a run step tool call details inner object.
    RunStepObject:
      type: object
      required:
        - id
        - object
        - created_at
        - assistant_id
        - thread_id
        - run_id
        - type
        - status
        - step_details
        - last_error
        - expired_at
        - cancelled_at
        - failed_at
        - completed_at
        - metadata
        - usage
      properties:
        id:
          type: string
          description: The identifier of the run step, which can be referenced in API endpoints.
        object:
          type: string
          enum:
            - thread.run.step
          description: The object type, which is always `thread.run.step`.
        created_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the run step was created.
        assistant_id:
          type: string
          description: The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
        thread_id:
          type: string
          description: The ID of the [thread](/docs/api-reference/threads) that was run.
        run_id:
          type: string
          description: The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
        type:
          type: string
          enum:
            - message_creation
            - tool_calls
          description: The type of run step, which can be either `message_creation` or `tool_calls`.
        status:
          type: string
          enum:
            - in_progress
            - cancelled
            - failed
            - completed
            - expired
          description: The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
        step_details:
          allOf:
            - $ref: '#/components/schemas/RunStepObjectStepDetails'
          description: The details of the run step.
          x-oaiExpandable: true
        last_error:
          type: object
          properties:
            code:
              type: string
              enum:
                - server_error
                - rate_limit_exceeded
              description: One of `server_error` or `rate_limit_exceeded`.
            message:
              type: string
              description: A human-readable description of the error.
          required:
            - code
            - message
          nullable: true
          description: The last error associated with this run step. Will be `null` if there are no errors.
        expired_at:
          type: integer
          format: unixtime
          nullable: true
          description: The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
        cancelled_at:
          type: integer
          format: unixtime
          nullable: true
          description: The Unix timestamp (in seconds) for when the run step was cancelled.
        failed_at:
          type: integer
          format: unixtime
          nullable: true
          description: The Unix timestamp (in seconds) for when the run step failed.
        completed_at:
          type: integer
          format: unixtime
          nullable: true
          description: The Unix timestamp (in seconds) for when the run step completed.
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
        usage:
          type: object
          allOf:
            - $ref: '#/components/schemas/RunStepCompletionUsage'
          nullable: true
      description: Represents a step in execution of a run.
    RunStepObjectStepDetails:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          description: The discriminated type identifier for the details object.
      discriminator:
        propertyName: type
        mapping:
          message_creation: '#/components/schemas/RunStepDetailsMessageCreationObject'
          tool_calls: '#/components/schemas/RunStepDetailsToolCallsObject'
      description: Abstractly represents a run step details object.
    RunToolCallObject:
      type: object
      required:
        - id
        - type
        - function
      properties:
        id:
          type: string
          description: The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.
        type:
          type: string
          enum:
            - function
          description: The type of tool call the output is required for. For now, this is always `function`.
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function.
            arguments:
              type: string
              description: The arguments that the model expects you to pass to the function.
          required:
            - name
            - arguments
          description: The function definition.
      description: Tool call objects
    StaticChunkingStrategy:
      type: object
      required:
        - max_chunk_size_tokens
        - chunk_overlap_tokens
      properties:
        max_chunk_size_tokens:
          type: integer
          format: int32
          minimum: 100
          maximum: 4096
          description: The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.
        chunk_overlap_tokens:
          type: integer
          format: int32
          description: |-
            The number of tokens that overlap between chunks. The default value is `400`.

            Note that the overlap must not exceed half of `max_chunk_size_tokens`.
    StaticChunkingStrategyRequestParam:
      type: object
      required:
        - type
        - static
      properties:
        type:
          type: string
          enum:
            - static
          description: Always `static`.
        static:
          $ref: '#/components/schemas/StaticChunkingStrategy'
      allOf:
        - $ref: '#/components/schemas/FileChunkingStrategyRequestParam'
    StaticChunkingStrategyResponseParam:
      type: object
      required:
        - type
        - static
      properties:
        type:
          type: string
          enum:
            - static
          description: Always `static`.
        static:
          $ref: '#/components/schemas/StaticChunkingStrategy'
      allOf:
        - $ref: '#/components/schemas/FileChunkingStrategyResponseParam'
    SubmitToolOutputsRunRequest:
      type: object
      required:
        - tool_outputs
      properties:
        tool_outputs:
          type: array
          items:
            type: object
            properties:
              tool_call_id:
                type: string
                description: The ID of the tool call in the `required_action` object within the run object the output is being submitted for.
              output:
                type: string
                description: The output of the tool call to be submitted to continue the run.
          description: A list of tools for which the outputs are being submitted.
        stream:
          type: boolean
          nullable: true
          description: 'If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.'
    ThreadObject:
      type: object
      required:
        - id
        - object
        - created_at
        - tool_resources
        - metadata
      properties:
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints.
        object:
          type: string
          enum:
            - thread
          description: The object type, which is always `thread`.
        created_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the thread was created.
        tool_resources:
          type: object
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  items:
                    type: string
                  maxItems: 20
                  description: A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
                  default: []
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  items:
                    type: string
                  maxItems: 1
                  description: The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
          nullable: true
          description: A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
      description: Represents a thread that contains [messages](/docs/api-reference/messages).
    TranscriptionSegment:
      type: object
      required:
        - id
        - seek
        - start
        - end
        - text
        - tokens
        - temperature
        - avg_logprob
        - compression_ratio
        - no_speech_prob
      properties:
        id:
          type: integer
          format: int32
          description: Unique identifier of the segment.
        seek:
          type: integer
          format: int32
          description: Seek offset of the segment.
        start:
          type: number
          format: float
          description: Start time of the segment in seconds.
        end:
          type: number
          format: float
          description: End time of the segment in seconds.
        text:
          type: string
          description: Text content of the segment.
        tokens:
          type: array
          items:
            type: integer
            format: int32
          description: Array of token IDs for the text content.
        temperature:
          type: number
          format: float
          description: Temperature parameter used for generating the segment.
        avg_logprob:
          type: number
          format: float
          description: Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
        compression_ratio:
          type: number
          format: float
          description: Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
        no_speech_prob:
          type: number
          format: float
          description: Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
    TranscriptionWord:
      type: object
      required:
        - word
        - start
        - end
      properties:
        word:
          type: string
          description: The text content of the word.
        start:
          type: number
          format: float
          description: Start time of the word in seconds.
        end:
          type: number
          format: float
          description: End time of the word in seconds.
    TruncationObject:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - auto
            - last_messages
          description: The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.
        last_messages:
          type: integer
          format: int32
          nullable: true
          minimum: 1
          description: The number of most recent messages from the thread when constructing the context for the run.
      description: Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.
    UpdateVectorStoreRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: The name of the vector store.
        expires_after:
          type: object
          allOf:
            - $ref: '#/components/schemas/VectorStoreExpirationAfter'
          nullable: true
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
    VectorStoreExpirationAfter:
      type: object
      required:
        - anchor
        - days
      properties:
        anchor:
          type: string
          enum:
            - last_active_at
          description: 'Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.'
        days:
          type: integer
          format: int32
          minimum: 1
          maximum: 365
          description: The number of days after the anchor time that the vector store will expire.
      description: The expiration policy for a vector store.
    VectorStoreFileBatchObject:
      type: object
      required:
        - id
        - object
        - created_at
        - vector_store_id
        - status
        - file_counts
      properties:
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints.
        object:
          type: string
          enum:
            - vector_store.files_batch
          description: The object type, which is always `vector_store.file_batch`.
        created_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the vector store files batch was created.
        vector_store_id:
          type: string
          description: The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.
        status:
          type: string
          enum:
            - in_progress
            - completed
            - cancelled
            - failed
          description: The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.
        file_counts:
          type: object
          properties:
            in_progress:
              type: integer
              format: int32
              description: The number of files that are currently being processed.
            completed:
              type: integer
              format: int32
              description: The number of files that have been processed.
            failed:
              type: integer
              format: int32
              description: The number of files that have failed to process.
            cancelled:
              type: integer
              format: int32
              description: The number of files that where cancelled.
            total:
              type: integer
              format: int32
              description: The total number of files.
          required:
            - in_progress
            - completed
            - failed
            - cancelled
            - total
      description: A batch of files attached to a vector store.
    VectorStoreFileObject:
      type: object
      required:
        - id
        - object
        - usage_bytes
        - created_at
        - vector_store_id
        - status
        - last_error
      properties:
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints.
        object:
          type: string
          enum:
            - vector_store.file
          description: The object type, which is always `vector_store.file`.
        usage_bytes:
          type: integer
          format: int32
          description: The total vector store usage in bytes. Note that this may be different from the original file size.
        created_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the vector store file was created.
        vector_store_id:
          type: string
          description: The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.
        status:
          type: string
          enum:
            - in_progress
            - completed
            - cancelled
            - failed
          description: The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.
        last_error:
          type: object
          properties:
            code:
              type: string
              enum:
                - internal_error
                - file_not_found
                - parsing_error
                - unhandled_mime_type
              description: One of `server_error` or `rate_limit_exceeded`.
            message:
              type: string
              description: A human-readable description of the error.
          required:
            - code
            - message
          nullable: true
          description: The last error associated with this vector store file. Will be `null` if there are no errors.
        chunking_strategy:
          anyOf:
            - $ref: '#/components/schemas/StaticChunkingStrategyResponseParam'
            - $ref: '#/components/schemas/OtherChunkingStrategyResponseParam'
          description: The strategy used to chunk the file.
          x-oaiExpandable: true
      description: A list of files attached to a vector store.
    VectorStoreObject:
      type: object
      required:
        - id
        - object
        - created_at
        - name
        - usage_bytes
        - file_counts
        - status
        - last_active_at
        - metadata
      properties:
        id:
          type: string
          description: The identifier, which can be referenced in API endpoints.
        object:
          type: string
          enum:
            - vector_store
          description: The object type, which is always `vector_store`.
        created_at:
          type: integer
          format: unixtime
          description: The Unix timestamp (in seconds) for when the vector store was created.
        name:
          type: string
          description: The name of the vector store.
        usage_bytes:
          type: integer
          format: int32
          description: The total number of bytes used by the files in the vector store.
        file_counts:
          type: object
          properties:
            in_progress:
              type: integer
              format: int32
              description: The number of files that are currently being processed.
            completed:
              type: integer
              format: int32
              description: The number of files that have been successfully processed.
            failed:
              type: integer
              format: int32
              description: The number of files that have failed to process.
            cancelled:
              type: integer
              format: int32
              description: The number of files that were cancelled.
            total:
              type: integer
              format: int32
              description: The total number of files.
          required:
            - in_progress
            - completed
            - failed
            - cancelled
            - total
        status:
          type: string
          enum:
            - expired
            - in_progress
            - completed
          description: The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
        expires_after:
          $ref: '#/components/schemas/VectorStoreExpirationAfter'
        expires_at:
          type: integer
          format: unixtime
          nullable: true
          description: The Unix timestamp (in seconds) for when the vector store will expire.
        last_active_at:
          type: integer
          format: unixtime
          nullable: true
          description: The Unix timestamp (in seconds) for when the vector store was last active.
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
          x-oaiTypeLabel: map
      description: A vector store is a collection of processed files can be used by the `file_search` tool.
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
servers:
  - url: https://api.openai.com/v1
    description: OpenAI Endpoint
    variables: {}
